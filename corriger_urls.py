#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® SCRIPT DE CORRECTION AUTOMATIQUE - URLs Auto-mesures DMP
Corrige automatiquement toutes les URLs incorrectes dans dmpApi.js
"""

import os
import re
import shutil
from datetime import datetime

def backup_file(file_path):
    """Cr√©er une sauvegarde du fichier avant modification"""
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(file_path, backup_path)
    print(f"‚úÖ Sauvegarde cr√©√©e : {backup_path}")
    return backup_path

def correct_urls(file_path):
    """Corriger toutes les URLs incorrectes dans le fichier"""
    
    # V√©rifier que le fichier existe
    if not os.path.exists(file_path):
        print(f"‚ùå Fichier non trouv√© : {file_path}")
        return False
    
    # Cr√©er une sauvegarde
    backup_path = backup_file(file_path)
    
    # Lire le contenu du fichier
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # D√©finir les corrections √† appliquer
    corrections = [
        {
            'search': r'/patient/auto-mesures',
            'replace': '/patients/dmp/auto-mesures',
            'description': 'URLs CRUD par ID (lignes 640, 651, 662)'
        },
        {
            'search': r'/patient/\$\{patientId\}/auto-mesures/stats',
            'replace': '/patients/${patientId}/dmp/auto-mesures/stats',
            'description': 'URL des statistiques (ligne 680)'
        },
        {
            'search': r'/patient/\$\{patientId\}/auto-mesures/last',
            'replace': '/patients/${patientId}/dmp/auto-mesures/last',
            'description': 'URL de la derni√®re mesure (ligne 690)'
        }
    ]
    
    # Appliquer chaque correction
    original_content = content
    for i, correction in enumerate(corrections, 1):
        print(f"\nüîß CORRECTION {i} : {correction['description']}")
        print(f"   Rechercher : {correction['search']}")
        print(f"   Remplacer par : {correction['replace']}")
        
        # Compter les occurrences avant remplacement
        matches_before = len(re.findall(correction['search'], content))
        
        # Appliquer le remplacement
        content = re.sub(correction['search'], correction['replace'], content)
        
        # Compter les occurrences apr√®s remplacement
        matches_after = len(re.findall(correction['search'], content))
        
        if matches_before > 0:
            print(f"   ‚úÖ {matches_before} occurrence(s) corrig√©e(s)")
        else:
            print(f"   ‚ö†Ô∏è  Aucune occurrence trouv√©e")
    
    # V√©rifier si des modifications ont √©t√© apport√©es
    if content == original_content:
        print("\n‚ö†Ô∏è  Aucune modification n'a √©t√© apport√©e au fichier")
        return False
    
    # √âcrire le fichier corrig√©
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"\n‚úÖ Fichier corrig√© avec succ√®s : {file_path}")
    return True

def verify_corrections(file_path):
    """V√©rifier que toutes les corrections ont √©t√© appliqu√©es"""
    print("\nüîç V√âRIFICATION DES CORRECTIONS :")
    print("==================================")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier que les anciennes URLs n'existent plus
    old_patterns = [
        r'/patient/auto-mesures',
        r'/patient/\$\{patientId\}/auto-mesures/stats',
        r'/patient/\$\{patientId\}/auto-mesures/last'
    ]
    
    all_corrected = True
    for pattern in old_patterns:
        matches = re.findall(pattern, content)
        if matches:
            print(f"‚ùå Pattern incorrect trouv√© : {pattern}")
            print(f"   Occurrences : {len(matches)}")
            all_corrected = False
        else:
            print(f"‚úÖ Pattern incorrect non trouv√© : {pattern}")
    
    # V√©rifier que les nouvelles URLs existent
    new_patterns = [
        r'/patients/dmp/auto-mesures',
        r'/patients/\$\{patientId\}/dmp/auto-mesures/stats',
        r'/patients/\$\{patientId\}/dmp/auto-mesures/last'
    ]
    
    for pattern in new_patterns:
        matches = re.findall(pattern, content)
        if matches:
            print(f"‚úÖ Nouveau pattern trouv√© : {pattern}")
            print(f"   Occurrences : {len(matches)}")
        else:
            print(f"‚ö†Ô∏è  Nouveau pattern non trouv√© : {pattern}")
    
    return all_corrected

def main():
    """Fonction principale"""
    print("üö® CORRECTION AUTOMATIQUE DES URLs AUTO-MESURES DMP")
    print("===================================================")
    print("")
    
    # Chemin du fichier √† corriger
    file_path = "src/services/api/dmpApi.js"
    
    print(f"üìÅ Fichier cible : {file_path}")
    print("")
    
    # Corriger les URLs
    if correct_urls(file_path):
        print("\n‚úÖ CORRECTION TERMIN√âE AVEC SUCC√àS !")
        
        # V√©rifier les corrections
        verify_corrections(file_path)
        
        print("\nüéØ R√âSULTAT ATTENDU :")
        print("=======================")
        print("‚úÖ Plus d'erreur 404 sur les auto-mesures")
        print("‚úÖ API auto-mesures compl√®tement fonctionnelle")
        print("‚úÖ Int√©gration frontend-backend op√©rationnelle")
        print("‚úÖ Composant AutoMesuresWidget avec donn√©es r√©elles")
        
        print("\nüß™ PROCHAINES √âTAPES :")
        print("=======================")
        print("1. Sauvegarder le fichier")
        print("2. Recharger l'application")
        print("3. V√©rifier que l'erreur 404 est r√©solue")
        print("4. Tester le composant AutoMesuresWidget")
        
    else:
        print("\n‚ùå √âCHEC DE LA CORRECTION")
        print("V√©rifiez que le fichier existe et est accessible")

if __name__ == "__main__":
    main()
