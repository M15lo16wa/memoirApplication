import { useState, useCallback } from 'react';
// 1. Importer la fonction de validation depuis votre service API
import { validate2FASession } from '../services/api/twoFactorApi'; // Assurez-vous que le chemin est correct

/**
 * Hook personnalis√© pour la gestion de la protection 2FA.
 * Il intercepte les erreurs 403, affiche une modale de validation,
 * et r√©-ex√©cute l'action initiale apr√®s une validation r√©ussie.
 */
export const use2FA = () => {
  // --- √âTATS INTERNES DU HOOK ---

  // G√®re la visibilit√© de la modale de saisie du code 2FA
  const [show2FAModal, setShow2FAModal] = useState(false);
  
  // Stocke l'action qui a √©t√© interrompue et qui doit √™tre ex√©cut√©e apr√®s validation
  const [pendingAction, setPendingAction] = useState(null);
  
  // G√®re l'√©tat de chargement pendant la validation du code
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Stocke les messages d'erreur de validation (ex: "Code invalide")
  const [validationError, setValidationError] = useState('');

  // --- FONCTIONS DE GESTION DU FLUX 2FA ---

  /**
   * 2. Fonction principale de validation.
   * C'est elle qui est appel√©e par le composant `Validate2FA` lorsque l'utilisateur soumet le code.
   * @param {string} code - Le code √† 6 chiffres entr√© par l'utilisateur.
   */
  const handle2FAValidation = useCallback(async (code) => {
    // On ne fait rien si une validation est d√©j√† en cours
    if (isSubmitting) return;

    console.log(`üîê Tentative de validation du code 2FA : ${code}`);
    setIsSubmitting(true);
    setValidationError('');

    try {
      // Appel √† l'API pour valider la session avec le code fourni
      await validate2FASession(code);
      
      console.log('‚úÖ Session 2FA valid√©e avec succ√®s !');
      setShow2FAModal(false); // On ferme la modale

      // Si la validation r√©ussit, on ex√©cute l'action qui √©tait en attente
      if (pendingAction) {
        console.log('üöÄ Ex√©cution de l\'action mise en attente...');
        // On utilise .func() car on a stock√© l'action sous cette forme
        await pendingAction.func(...pendingAction.args); 
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la validation du code 2FA:', error);
      // On stocke le message d'erreur pour l'afficher √† l'utilisateur
      setValidationError(error || 'Code invalide ou expir√©. Veuillez r√©essayer.');
    
    } finally {
      // Dans tous les cas, on r√©initialise l'√©tat de soumission et l'action en attente
      setIsSubmitting(false);
      // On ne r√©initialise l'action que si la validation a r√©ussi, sinon on la garde pour une nouvelle tentative
      if (!validationError) {
        setPendingAction(null);
      }
    }
  }, [isSubmitting, pendingAction, validationError]); // D√©pendances du useCallback

  /**
   * G√®re l'annulation par l'utilisateur depuis la modale.
   */
  const handle2FACancel = useCallback(() => {
    console.log('‚ùå Annulation de la 2FA par l\'utilisateur.');
    setShow2FAModal(false);
    setPendingAction(null);
    setValidationError('');
  }, []);

  /**
   * 3. Le "wrapper" qui prot√®ge une fonction.
   * C'est la fonction la plus importante √† exporter.
   * @param {Function} action - La fonction asynchrone √† prot√©ger (ex: `getPatientRecord`).
   * @returns {Function} - Une nouvelle fonction qui g√®re la logique 2FA.
   */
  const with2FAProtection = useCallback((action) => {
    // On retourne une fonction asynchrone qui accepte les m√™mes arguments que l'action originale
    return async (...args) => {
      try {
        // On tente d'ex√©cuter l'action directement.
        // Si la session 2FA est d√©j√† valid√©e, cela fonctionnera.
        console.log('‚ñ∂Ô∏è Tentative d\'ex√©cution de l\'action prot√©g√©e...');
        return await action(...args);

      } catch (error) {
        // On v√©rifie si l'erreur est bien celle que le backend nous envoie pour demander la 2FA.
        // On se base sur le statut 403 et un mot-cl√© dans le message pour √™tre pr√©cis.
        if (error.response?.status === 403 && error.response?.data?.message?.includes('Veuillez valider')) {
          console.log('üîê Backend requiert une validation 2FA. Affichage de la modale.');
          
          // On sauvegarde l'action et ses arguments pour l'ex√©cuter plus tard
          setPendingAction({ func: action, args: args });
          
          // On affiche la modale pour que l'utilisateur puisse saisir son code
          setShow2FAModal(true);
          
          return null; // On interrompt le flux d'ex√©cution normal

        } else {
          // Si ce n'est pas une erreur de 2FA, on ne la g√®re pas ici et on la relance.
          console.error('Une erreur non li√©e √† la 2FA est survenue:', error);
          throw error;
        }
      }
    };
  }, []); // Le useCallback ici assure que la fonction n'est pas recr√©√©e √† chaque render.

  // --- VALEURS RETOURN√âES PAR LE HOOK ---
  // On retourne tout ce dont les composants auront besoin pour interagir avec le hook.
  return {
    show2FAModal,       // Pour savoir s'il faut afficher la modale
    isSubmitting,       // Pour afficher un spinner/loader dans la modale
    validationError,    // Pour afficher les erreurs de validation
    with2FAProtection,  // La fonction "wrapper" pour prot√©ger les actions
    handle2FAValidation,// La fonction √† passer √† la prop `onSubmit` de la modale
    handle2FACancel,    // La fonction √† passer √† la prop `onCancel` de la modale
  };
};
