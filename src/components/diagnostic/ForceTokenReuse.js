import React, { useState } from 'react';
import { getValidAuthToken } from '../../services/api/authApi';

const ForceTokenReuse = () => {
    const [diagnosticResults, setDiagnosticResults] = useState([]);
    const [isLoading, setIsLoading] = useState(false);

    const addLog = (message, type = 'info') => {
        const timestamp = new Date().toLocaleTimeString();
        setDiagnosticResults(prev => [...prev, { timestamp, message, type }]);
    };

    const analyzeCurrentState = () => {
        addLog('üîç Analyse de l\'√©tat actuel des tokens...', 'info');
        
        // Analyser tous les tokens disponibles
        const jwt = localStorage.getItem('jwt');
        const token = localStorage.getItem('token');
        const firstConnectionToken = localStorage.getItem('firstConnectionToken');
        const originalToken = localStorage.getItem('originalToken');
        const tempTokenId = localStorage.getItem('tempTokenId');
        const medecin = localStorage.getItem('medecin');
        
        addLog('üìä √âtat actuel du localStorage:', 'info');
        addLog(`   - jwt: ${jwt ? `${jwt.substring(0, 30)}...` : 'Absent'}`, 'info');
        addLog(`   - token: ${token ? `${token.substring(0, 30)}...` : 'Absent'}`, 'info');
        addLog(`   - firstConnectionToken: ${firstConnectionToken ? `${firstConnectionToken.substring(0, 30)}...` : 'Absent'}`, 'info');
        addLog(`   - originalToken: ${originalToken ? `${originalToken.substring(0, 30)}...` : 'Absent'}`, 'info');
        addLog(`   - tempTokenId: ${tempTokenId ? `${tempTokenId.substring(0, 30)}...` : 'Absent'}`, 'info');
        addLog(`   - medecin: ${medecin ? 'Pr√©sent' : 'Absent'}`, 'info');
        
        // Analyser le token actuel utilis√©
        const currentToken = getValidAuthToken();
        addLog(`üîë Token actuellement utilis√©: ${currentToken ? `${currentToken.substring(0, 30)}...` : 'Aucun'}`, 'info');
        
        if (currentToken) {
            addLog(`üìè Longueur: ${currentToken.length} caract√®res`, 'info');
            addLog(`üîê Format: ${currentToken.startsWith('eyJ') ? 'JWT standard' : 'Non-JWT'}`, 'info');
            addLog(`üö´ Type: ${currentToken.startsWith('temp_') ? 'Temporaire' : currentToken.startsWith('auth_') ? 'Auth temporaire' : 'Permanent'}`, 'info');
        }
        
        return { jwt, token, firstConnectionToken, originalToken, tempTokenId, currentToken };
    };

    const forceTokenReuse = () => {
        addLog('üîß Tentative de for√ßage de la r√©utilisation du firstConnectionToken...', 'info');
        
        const { firstConnectionToken, originalToken, currentToken } = analyzeCurrentState();
        
        if (!firstConnectionToken && !originalToken) {
            addLog('‚ùå Aucun token de premi√®re connexion disponible', 'error');
            addLog('üí° Solution: Reconnectez-vous pour g√©n√©rer un nouveau token', 'info');
            return false;
        }
        
        // Priorit√© au firstConnectionToken, puis originalToken
        const tokenToUse = firstConnectionToken || originalToken;
        
        if (tokenToUse.startsWith('temp_') || tokenToUse.startsWith('auth_')) {
            addLog('‚ö†Ô∏è Le token disponible est temporaire, pas id√©al', 'warning');
        }
        
        // Forcer l'utilisation du bon token
        if (tokenToUse.startsWith('eyJ')) {
            // C'est un JWT, le stocker dans jwt
            localStorage.setItem('jwt', tokenToUse);
            addLog(`‚úÖ JWT stock√© dans 'jwt': ${tokenToUse.substring(0, 30)}...`, 'success');
        } else {
            // C'est un token g√©n√©ral, le stocker dans token
            localStorage.setItem('token', tokenToUse);
            addLog(`‚úÖ Token stock√© dans 'token': ${tokenToUse.substring(0, 30)}...`, 'success');
        }
        
        // Nettoyer les tokens temporaires
        if (localStorage.getItem('tempTokenId')) {
            localStorage.removeItem('tempTokenId');
            addLog('üßπ tempTokenId supprim√©', 'info');
        }
        
        // V√©rifier le r√©sultat
        const newToken = getValidAuthToken();
        if (newToken === tokenToUse) {
            addLog('‚úÖ Token correctement appliqu√©!', 'success');
            return true;
        } else {
            addLog('‚ùå √âchec de l\'application du token', 'error');
            return false;
        }
    };

    const clearAllTokens = () => {
        addLog('üóëÔ∏è Nettoyage complet de tous les tokens...', 'warning');
        
        localStorage.removeItem('jwt');
        localStorage.removeItem('token');
        localStorage.removeItem('firstConnectionToken');
        localStorage.removeItem('originalToken');
        localStorage.removeItem('tempTokenId');
        localStorage.removeItem('medecin');
        localStorage.removeItem('patient');
        
        addLog('‚úÖ Tous les tokens supprim√©s', 'success');
        addLog('üí° Reconnectez-vous pour g√©n√©rer de nouveaux tokens', 'info');
    };

    const restoreFromMedecinData = () => {
        addLog('üîç Tentative de restauration depuis les donn√©es m√©decin...', 'info');
        
        const medecinData = localStorage.getItem('medecin');
        if (!medecinData) {
            addLog('‚ùå Aucune donn√©e m√©decin disponible', 'error');
            return false;
        }
        
        try {
            const parsedMedecin = JSON.parse(medecinData);
            addLog('üìã Donn√©es m√©decin pars√©es:', 'info');
            addLog(`   - Cl√©s disponibles: ${Object.keys(parsedMedecin).join(', ')}`, 'info');
            
            if (parsedMedecin.originalToken) {
                localStorage.setItem('token', parsedMedecin.originalToken);
                addLog(`‚úÖ Token original restaur√©: ${parsedMedecin.originalToken.substring(0, 30)}...`, 'success');
                return true;
            }
            
            if (parsedMedecin.originalJWT) {
                localStorage.setItem('jwt', parsedMedecin.originalJWT);
                addLog(`‚úÖ JWT original restaur√©: ${parsedMedecin.originalJWT.substring(0, 30)}...`, 'success');
                return true;
            }
            
            addLog('‚ùå Aucun token original trouv√© dans les donn√©es m√©decin', 'error');
            return false;
            
        } catch (error) {
            addLog(`‚ùå Erreur lors du parsing des donn√©es m√©decin: ${error.message}`, 'error');
            return false;
        }
    };

    const runFullDiagnostic = () => {
        setDiagnosticResults([]);
        addLog('üöÄ D√©marrage du diagnostic complet...', 'info');
        
        // √âtape 1: Analyse de l'√©tat actuel
        const state = analyzeCurrentState();
        
        // √âtape 2: Tentative de restauration depuis les donn√©es m√©decin
        if (restoreFromMedecinData()) {
            addLog('‚úÖ Restauration r√©ussie depuis les donn√©es m√©decin', 'success');
        } else {
            addLog('‚ö†Ô∏è Restauration depuis les donn√©es m√©decin √©chou√©e', 'warning');
        }
        
        // √âtape 3: For√ßage de la r√©utilisation
        if (forceTokenReuse()) {
            addLog('‚úÖ R√©utilisation du token forc√©e avec succ√®s', 'success');
        } else {
            addLog('‚ùå √âchec de la r√©utilisation du token', 'error');
        }
        
        // √âtape 4: V√©rification finale
        const finalToken = getValidAuthToken();
        addLog('üîç V√©rification finale:', 'info');
        addLog(`   - Token final: ${finalToken ? `${finalToken.substring(0, 30)}...` : 'Aucun'}`, 'info');
        
        if (finalToken && !finalToken.startsWith('temp_') && !finalToken.startsWith('auth_')) {
            addLog('üéâ SUCC√àS: Token valide restaur√©!', 'success');
        } else {
            addLog('üí° RECOMMANDATION: Reconnectez-vous pour r√©soudre le probl√®me', 'info');
        }
    };

    const clearLogs = () => {
        setDiagnosticResults([]);
    };

    const exportLogs = () => {
        const logsText = diagnosticResults
            .map(log => `[${log.timestamp}] ${log.message}`)
            .join('\n');
        
        const blob = new Blob([logsText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `force-token-reuse-${new Date().toISOString().slice(0, 19)}.txt`;
        a.click();
        URL.revokeObjectURL(url);
    };

    return (
        <div className="p-6 bg-white rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">
                üîß Force Token Reuse - Diagnostic Avanc√©
            </h2>
            
            <div className="mb-6 space-y-3">
                <div className="flex flex-wrap gap-3">
                    <button
                        onClick={runFullDiagnostic}
                        disabled={isLoading}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                    >
                        {isLoading ? '‚è≥ Diagnostic en cours...' : 'üöÄ Diagnostic Complet'}
                    </button>
                    
                    <button
                        onClick={analyzeCurrentState}
                        disabled={isLoading}
                        className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50"
                    >
                        üîç Analyser l'√âtat
                    </button>
                    
                    <button
                        onClick={forceTokenReuse}
                        disabled={isLoading}
                        className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50"
                    >
                        üîß Forcer R√©utilisation
                    </button>
                    
                    <button
                        onClick={restoreFromMedecinData}
                        disabled={isLoading}
                        className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:opacity-50"
                    >
                        üìã Restaurer depuis M√©decin
                    </button>
                </div>
                
                <div className="flex gap-3">
                    <button
                        onClick={clearAllTokens}
                        className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                    >
                        üóëÔ∏è Nettoyer Tout
                    </button>
                    
                    <button
                        onClick={clearLogs}
                        className="px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600"
                    >
                        üóëÔ∏è Effacer Logs
                    </button>
                    
                    <button
                        onClick={exportLogs}
                        disabled={diagnosticResults.length === 0}
                        className="px-3 py-1 bg-indigo-500 text-white rounded hover:bg-indigo-600 disabled:opacity-50"
                    >
                        üì• Exporter Logs
                    </button>
                </div>
            </div>

            <div className="bg-gray-50 rounded-lg p-4 max-h-96 overflow-y-auto">
                <h3 className="font-semibold text-gray-900 mb-3">üìã Logs du Diagnostic</h3>
                
                {diagnosticResults.length === 0 ? (
                    <p className="text-gray-500 text-center py-8">
                        Aucun diagnostic effectu√©. Cliquez sur "Diagnostic Complet" pour commencer.
                    </p>
                ) : (
                    <div className="space-y-2">
                        {diagnosticResults.map((log, index) => (
                            <div
                                key={index}
                                className={`p-2 rounded text-sm font-mono ${
                                    log.type === 'error' ? 'bg-red-100 text-red-800' :
                                    log.type === 'success' ? 'bg-green-100 text-green-800' :
                                    log.type === 'warning' ? 'bg-yellow-100 text-yellow-800' :
                                    'bg-blue-100 text-blue-800'
                                }`}
                            >
                                <span className="text-gray-600">[{log.timestamp}]</span> {log.message}
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
};

export default ForceTokenReuse;
