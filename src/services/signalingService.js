import { io } from 'socket.io-client';

// Fonction am√©lior√©e pour r√©cup√©rer le token d'authentification valide
const getValidAuthToken = () => {
    // Priorit√© 1: Token principal (token ou jwt)
    const mainToken = localStorage.getItem('token') || localStorage.getItem('jwt');
    if (mainToken) {
        console.log('üîë SignalingService - Token principal trouv√©:', mainToken.substring(0, 20) + '...');
        return mainToken;
    }
    
    // Priorit√© 2: V√©rifier s'il y a un patient connect√© avec son token
    const patientData = localStorage.getItem('patient');
    if (patientData) {
        try {
            const patient = JSON.parse(patientData);
            if (patient.token) {
                console.log('üîë SignalingService - Token patient trouv√©:', patient.token.substring(0, 20) + '...');
                return patient.token;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è SignalingService - Erreur parsing donn√©es patient:', error);
        }
    }
    
    // Priorit√© 3: V√©rifier s'il y a un m√©decin connect√© avec son token
    const medecinData = localStorage.getItem('medecin');
    if (medecinData) {
        try {
            const medecin = JSON.parse(medecinData);
            if (medecin.token) {
                console.log('üîë SignalingService - Token m√©decin trouv√©:', medecin.token.substring(0, 20) + '...');
                return medecin.token;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è SignalingService - Erreur parsing donn√©es m√©decin:', error);
        }
    }
    
    console.warn('‚ö†Ô∏è SignalingService - Aucun token valide trouv√©');
    return null;
};

class SignalingService {
    socket = null;
    baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3000';

    connect() {
        // Ne cr√©e qu'une seule instance de socket
        if (this.socket) {
            console.log('üîç SignalingService - Socket d√©j√† connect√©, r√©utilisation de l\'instance existante');
            return this.socket;
        }

        const token = getValidAuthToken();
        if (!token) {
            console.error("‚ùå SignalingService - Connexion impossible, token manquant.");
            return null;
        }
        
        // D√©terminer le type d'utilisateur pour les logs
        let userType = 'inconnu';
        let userId = 'inconnu';
        
        const patientData = localStorage.getItem('patient');
        const medecinData = localStorage.getItem('medecin');
        
        if (patientData) {
            try {
                const patient = JSON.parse(patientData);
                userType = 'patient';
                userId = patient.id_patient || patient.id || 'inconnu';
            } catch (error) {
                console.warn('‚ö†Ô∏è SignalingService - Erreur parsing patient data:', error);
            }
        } else if (medecinData) {
            try {
                const medecin = JSON.parse(medecinData);
                userType = 'm√©decin';
                userId = medecin.id_professionnel || medecin.id || 'inconnu';
            } catch (error) {
                console.warn('‚ö†Ô∏è SignalingService - Erreur parsing medecin data:', error);
            }
        }
        
        console.log(`üöÄ SignalingService - Tentative de connexion Socket.IO pour ${userType} (ID: ${userId}) √†:`, this.baseURL);
        console.log(`üîë SignalingService - Token utilis√©: ${token.substring(0, 20)}...`);
        
        // Connexion Socket.IO √† l'endpoint principal
        this.socket = io(this.baseURL, { 
            auth: { token },
            transports: ['websocket', 'polling'], // Fallback sur polling si websocket √©choue
            path: '/socket.io/', // Chemin par d√©faut de Socket.IO
            timeout: 20000, // Timeout de 20 secondes
            forceNew: true // Forcer une nouvelle connexion
        });

        this.socket.on('connect', () => {
            console.log('‚úÖ Service de signalisation connect√© avec succ√®s');
            console.log('  - Socket ID:', this.socket.id);
            console.log('  - URL:', this.baseURL);
            console.log('  - Transport:', this.socket.io.engine.transport.name);
        });
        
        this.socket.on('disconnect', (reason) => {
            console.log('üîå Service de signalisation d√©connect√©:', reason);
        });
        
        this.socket.on('connect_error', (err) => {
            console.error('‚ùå Erreur de connexion au service:', err.message);
            console.error('  - D√©tails:', err);
            console.error('  - V√©rifiez que le serveur supporte Socket.IO');
        });

        return this.socket;
    }

    // M√©thode g√©n√©rique pour envoyer un √©v√©nement
    emit(event, data) {
        if (this.socket) {
            this.socket.emit(event, data);
        } else {
            console.error(`Impossible d'√©mettre l'√©v√©nement '${event}', le socket n'est pas connect√©.`);
        }
    }

    // M√©thode g√©n√©rique pour √©couter un √©v√©nement
    on(event, callback) {
        if (this.socket) {
            this.socket.on(event, callback);
        }
    }

    // M√©thode pour nettoyer un listener
    off(event, callback) {
        if (this.socket) {
            this.socket.off(event, callback);
        }
    }

    // ===== NOUVELLES M√âTHODES POUR L'API MESSAGING =====

    // R√©cup√©rer les conversations de l'utilisateur
    async getUserConversations() {
        try {
            const token = getValidAuthToken();
            const response = await fetch(`${this.baseURL}/api/messaging/conversations`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            return {
                success: true,
                conversations: data.data?.conversations || []
            };
        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration des conversations:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // R√©cup√©rer les messages d'une conversation
    async getConversationMessages(conversationId, page = 1, limit = 50) {
        try {
            const token = getValidAuthToken();
            const response = await fetch(
                `${this.baseURL}/api/messaging/conversations/${conversationId}/messages?page=${page}&limit=${limit}`,
                {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            return {
                success: true,
                messages: data.data?.messages || [],
                pagination: data.data?.pagination || {}
            };
        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration des messages:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // Envoyer un message dans une conversation
    async sendMessage(conversationId, content, type = 'texte', metadata = {}) {
        try {
            const token = getValidAuthToken();
            const response = await fetch(
                `${this.baseURL}/api/messaging/conversations/${conversationId}/messages`,
                {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        contenu: content,
                        type_message: type,
                        metadata
                    })
                }
            );

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            
            // √âmettre l'√©v√©nement WebSocket pour la diffusion en temps r√©el
            this.emit('message_sent', {
                conversationId,
                message: data.data?.message
            });

            return {
                success: true,
                message: data.data?.message
            };
        } catch (error) {
            console.error('Erreur lors de l\'envoi du message:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // Cr√©er une nouvelle conversation
    async createConversation(participants, type = 'patient_medecin', titre = null) {
        try {
            const token = getValidAuthToken();
            const { patient_id, professionnel_id } = participants;
            
            const response = await fetch(`${this.baseURL}/api/messaging/conversations`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    patient_id,
                    professionnel_id,
                    type_conversation: type,
                    titre: titre || `Conversation ${patient_id}-${professionnel_id}`
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            return {
                success: true,
                conversation: data.data?.conversation
            };
        } catch (error) {
            console.error('Erreur lors de la cr√©ation de conversation:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // R√©cup√©rer les conversations avec messages non lus
    async getUnreadConversations() {
        try {
            const token = getValidAuthToken();
            const response = await fetch(`${this.baseURL}/api/messaging/conversations/unread`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            return {
                success: true,
                conversations: data.data?.conversations || []
            };
        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration des conversations non lues:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // Marquer un message comme lu
    async markMessageAsRead(messageId) {
        try {
            const token = getValidAuthToken();
            const response = await fetch(
                `${this.baseURL}/api/messaging/messages/${messageId}/read`,
                {
                    method: 'PATCH',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return { success: true };
        } catch (error) {
            console.error('Erreur lors du marquage du message:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // M√©thodes WebSocket pour la messagerie
    joinConversation(conversationId) {
        this.emit('join_conversation', { conversationId });
    }

    leaveConversation(conversationId) {
        this.emit('leave_conversation', { conversationId });
    }

    setUserPresence(status = 'online') {
        this.emit('user_presence', { status });
    }

    // M√©thodes pour la compatibilit√© avec l'ancien code
    connectSocket(userId, userType, token) {
        console.log('üîç SignalingService - connectSocket appel√© avec:', { 
            userId, 
            userType, 
            token: !!token,
            tokenLength: token ? token.length : 0
        });
        
        // V√©rifier si on a d√©j√† un token valide
        const currentToken = getValidAuthToken();
        console.log('üîç SignalingService - Token actuel disponible:', !!currentToken);
        
        try {
            const socket = this.connect();
            if (socket) {
                console.log('‚úÖ SignalingService - Connexion Socket.IO r√©ussie');
                console.log('  - Socket ID:', socket.id);
                console.log('  - User Type:', userType);
                console.log('  - User ID:', userId);
                return socket;
            } else {
                console.error('‚ùå SignalingService - √âchec de la connexion Socket.IO');
                return null;
            }
        } catch (error) {
            console.error('‚ùå SignalingService - Erreur lors de la connexion Socket.IO:', error);
            return null;
        }
    }

    closeConnection() {
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
        }
    }

    // M√©thode de diagnostic pour v√©rifier l'√©tat de l'authentification
    diagnoseAuthState() {
        console.log('üîç SignalingService - Diagnostic de l\'√©tat d\'authentification:');
        
        const token = localStorage.getItem('token');
        const jwt = localStorage.getItem('jwt');
        const patientData = localStorage.getItem('patient');
        const medecinData = localStorage.getItem('medecin');
        
        console.log('  - token principal:', token ? '‚úÖ Pr√©sent' : '‚ùå Absent');
        console.log('  - jwt:', jwt ? '‚úÖ Pr√©sent' : '‚ùå Absent');
        console.log('  - patient data:', patientData ? '‚úÖ Pr√©sent' : '‚ùå Absent');
        console.log('  - medecin data:', medecinData ? '‚úÖ Pr√©sent' : '‚ùå Absent');
        
        if (patientData) {
            try {
                const patient = JSON.parse(patientData);
                console.log('  - Patient ID:', patient.id_patient || patient.id);
                console.log('  - Patient token:', patient.token ? '‚úÖ Pr√©sent' : '‚ùå Absent');
            } catch (error) {
                console.warn('  - Erreur parsing patient data:', error);
            }
        }
        
        if (medecinData) {
            try {
                const medecin = JSON.parse(medecinData);
                console.log('  - M√©decin ID:', medecin.id_professionnel || medecin.id);
                console.log('  - M√©decin token:', medecin.token ? '‚úÖ Pr√©sent' : '‚ùå Absent');
            } catch (error) {
                console.warn('  - Erreur parsing medecin data:', error);
            }
        }
        
        const validToken = getValidAuthToken();
        console.log('  - Token valide trouv√©:', validToken ? '‚úÖ Oui' : '‚ùå Non');
        
        return {
            hasValidToken: !!validToken,
            token: validToken,
            userType: patientData ? 'patient' : medecinData ? 'medecin' : 'unknown'
        };
    }

    onMessageReceived(callback) {
        this.on('new_message', callback);
    }

    onNotification(callback) {
        this.on('notification', callback);
    }
}

// Exporter une instance unique pour toute l'application
const signalingService = new SignalingService();
export default signalingService;