import axios from "axios";

const API_URL = "http://localhost:3000/api";

// Configuration de d√©bogage pour identifier le probl√®me
console.log('üîß Configuration API:', {
    baseURL: API_URL,
    userAgent: navigator.userAgent,
    origin: window.location.origin,
    protocol: window.location.protocol,
    hostname: window.location.hostname,
    port: window.location.port
});

// üîç DEBUG TEMPORAIRE - V√©rification des tokens stock√©s
console.log('üîê DEBUG - Tokens stock√©s dans localStorage:');
const allTokens = {};
Object.keys(localStorage).forEach(key => {
    if (key.includes('token') || key.includes('jwt') || key.includes('auth')) {
        const value = localStorage.getItem(key);
        allTokens[key] = {
            value: value,
            length: value ? value.length : 0,
            preview: value ? value.substring(0, 50) + '...' : 'null',
            isJWT: value ? value.startsWith('eyJ') : false
        };
    }
});
console.table(allTokens);

// üîç DEBUG TEMPORAIRE - V√©rification des donn√©es utilisateur
console.log('üë§ DEBUG - Donn√©es utilisateur stock√©es:');
const userData = {
    medecin: localStorage.getItem('medecin') ? 'Pr√©sent' : 'Absent',
    patient: localStorage.getItem('patient') ? 'Pr√©sent' : 'Absent',
    user: localStorage.getItem('user') ? 'Pr√©sent' : 'Absent'
};
console.table(userData);

const api = axios.create({
    baseURL: API_URL,
    headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
    },
});

// Intercepteur pour ajouter le token √† chaque requ√™te
api.interceptors.request.use(
    (config) => {
        const token = getValidAuthToken();
        console.log('üåê DEBUG - Requ√™te API intercept√©e:', {
            url: config.url,
            method: config.method?.toUpperCase(),
            hasToken: !!token,
            tokenPreview: token ? `${token.substring(0, 20)}...` : 'Aucun',
            tokenLength: token ? token.length : 0,
            tokenFormat: token ? (token.startsWith('eyJ') ? 'JWT standard' : 'Non-JWT') : 'N/A',
            fullHeaders: config.headers,
            baseURL: config.baseURL,
            fullURL: `${config.baseURL}${config.url}`
        });
        
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
            console.log('üîê DEBUG - Header Authorization ajout√©:', `Bearer ${token.substring(0, 20)}...`);
            console.log('üîê DEBUG - Headers complets apr√®s ajout:', config.headers);
        } else {
            console.log('‚ö†Ô∏è DEBUG - Aucun token disponible pour cette requ√™te');
        }
        
        return config;
    },
    (error) => {
        console.error('‚ùå DEBUG - Erreur dans l\'intercepteur de requ√™te:', error);
        return Promise.reject(error);
    }
);

// Interceptor pour g√©rer les erreurs d'authentification
api.interceptors.response.use(
    (response) => response,
    async (error) => {
        // G√©rer automatiquement les erreurs 401 (token expir√©)
        if (error.response?.status === 401 && !error.config._retry) {
            console.log('üîÑ Erreur 401 d√©tect√©e, analyse du probl√®me...');
            
            // Log d√©taill√© de l'erreur 401
            console.log('üö® D√©tails de l\'erreur 401:', {
                url: error.config?.url,
                method: error.config?.method,
                status: error.response.status,
                message: error.response.data?.message || 'Non sp√©cifi√©',
                tokenUsed: error.config?.headers?.Authorization ? 'Oui' : 'Non',
                tokenPreview: error.config?.headers?.Authorization ? 
                    error.config.headers.Authorization.substring(0, 50) + '...' : 'Aucun',
                serverResponse: error.response.data,
                requestHeaders: error.config?.headers,
                baseURL: error.config?.baseURL
            });
            
            // V√©rifier l'√©tat des tokens au moment de l'erreur
            console.log('üîç √âtat des tokens lors de l\'erreur 401:');
            const tokenStatus = {
                jwt: localStorage.getItem('jwt') ? 'Pr√©sent' : 'Absent',
                token: localStorage.getItem('token') ? 'Pr√©sent' : 'Absent',
                originalJWT: localStorage.getItem('originalJWT') ? 'Pr√©sent' : 'Absent',
                firstConnectionToken: localStorage.getItem('firstConnectionToken') ? 'Pr√©sent' : 'Absent'
            };
            console.log(tokenStatus);
            
            // Tentative de rafra√Æchissement automatique
            try {
                console.log('üîÑ Tentative de rafra√Æchissement automatique...');
                error.config._retry = true;
                
                const newToken = await attemptTokenRefresh();
                
                if (newToken) {
                    console.log('‚úÖ Token rafra√Æchi avec succ√®s, retentative de la requ√™te originale...');
                    error.config.headers.Authorization = `Bearer ${newToken}`;
                    return api.request(error.config);
                } else {
                    console.log('‚ùå Impossible de rafra√Æchir le token');
                    
                    // Tentative de reconnexion automatique
                    console.log('üîÑ Tentative de reconnexion automatique...');
                    const reconnectSuccess = await attemptAutoReconnect();
                    
                    if (reconnectSuccess) {
                        console.log('‚úÖ Reconnexion r√©ussie, retentative de la requ√™te originale...');
                        return api.request(error.config);
                    } else {
                        console.log('‚ùå Reconnexion √©chou√©e, redirection vers la connexion...');
                        window.location.href = '/connexion';
                        return Promise.reject(error);
                    }
                }
            } catch (refreshError) {
                console.error('‚ùå Erreur lors du rafra√Æchissement automatique:', refreshError);
                
                // Tentative de reconnexion en dernier recours
                try {
                    const reconnectSuccess = await attemptAutoReconnect();
                    if (reconnectSuccess) {
                        return api.request(error.config);
                    }
                } catch (reconnectError) {
                    console.error('‚ùå Reconnexion √©chou√©e:', reconnectError);
                }
                
                window.location.href = '/connexion';
                return Promise.reject(error);
            }
        }
        
        return Promise.reject(error);
    }
);



// Intercepteur de r√©ponse pour logger les erreurs d'authentification
api.interceptors.response.use(
    (response) => {
        return response;
    },
    (error) => {
        // Log d√©taill√© de toutes les erreurs pour le d√©bogage
        if (error.response) {
            console.log('üö® DEBUG - Erreur de r√©ponse d√©taill√©e:', {
                status: error.response.status,
                statusText: error.response.statusText,
                data: error.response.data,
                headers: error.response.headers,
                config: {
                    url: error.config?.url,
                    method: error.config?.method,
                    headers: error.config?.headers,
                    baseURL: error.config?.baseURL,
                    fullURL: `${error.config?.baseURL || ''}${error.config?.url || ''}`
                }
            });
        } else if (error.request) {
            console.log('üö® DEBUG - Erreur de requ√™te (pas de r√©ponse):', {
                request: error.request,
                message: error.message
            });
        } else {
            console.log('üö® DEBUG - Erreur g√©n√©rale:', error.message);
        }
        
        // Log sp√©cifique pour les erreurs 401
        if (error.response?.status === 401) {
            console.log('üö® DEBUG - Erreur 401 d√©tect√©e:', {
                url: error.config?.url,
                method: error.config?.method,
                status: error.response.status,
                message: error.response.data?.message || 'Non sp√©cifi√©',
                tokenUsed: error.config?.headers?.Authorization ? 'Oui' : 'Non',
                tokenPreview: error.config?.headers?.Authorization ? 
                    error.config.headers.Authorization.substring(0, 30) + '...' : 'Aucun'
            });
            
            // Log de l'√©tat des tokens au moment de l'erreur
            console.log('üîç DEBUG - √âtat des tokens lors de l\'erreur 401:', {
                jwt: localStorage.getItem('jwt') ? 'Pr√©sent' : 'Absent',
                token: localStorage.getItem('token') ? 'Pr√©sent' : 'Absent',
                firstConnectionToken: localStorage.getItem('firstConnectionToken') ? 'Pr√©sent' : 'Absent',
                medecin: localStorage.getItem('medecin') ? 'Pr√©sent' : 'Absent'
            });
        }
        
        return Promise.reject(error);
    }
);

// Fonction utilitaire pour nettoyer les donn√©es d'authentification
const clearAuthData = () => {
    localStorage.removeItem("jwt");
    localStorage.removeItem("token");
    localStorage.removeItem("medecin");
    localStorage.removeItem("patient");
    // ‚úÖ CORRECTION : Nettoyer aussi les tokens temporaires 2FA
    localStorage.removeItem("tempTokenId");
    // ‚ö†Ô∏è NE PAS supprimer firstConnectionToken et originalJWT pendant une session active
    console.log('üßπ clearAuthData - Nettoyage effectu√©, conservation de firstConnectionToken et originalJWT');
};

// ‚úÖ NOUVELLE FONCTION : Nettoyage standardis√© et complet
export const standardCleanup = (userType = null) => {
    const keysToRemove = [
        'token', 'jwt', 'medecin', 'patient', 'tempTokenId',
        'user', 'auth', 'session', 'userData', 'userProfile'
    ];
    
    // Nettoyer toutes les cl√©s standard
    keysToRemove.forEach(key => {
        if (localStorage.getItem(key)) {
            localStorage.removeItem(key);
            console.log(`üóëÔ∏è Supprim√©: ${key}`);
        }
    });
    
    // Nettoyage sp√©cifique selon le type d'utilisateur
    if (userType === 'patient') {
        const patientKeys = ['patientData', 'patientProfile', 'patientHistory'];
        patientKeys.forEach(key => {
            if (localStorage.getItem(key)) {
                localStorage.removeItem(key);
                console.log(`üóëÔ∏è Supprim√© (patient): ${key}`);
            }
        });
    } else if (userType === 'medecin') {
        const medecinKeys = ['medecinData', 'medecinProfile', 'medecinHistory'];
        medecinKeys.forEach(key => {
            if (localStorage.getItem(key)) {
                localStorage.removeItem(key);
                console.log(`üóëÔ∏è Supprim√© (m√©decin): ${key}`);
            }
        });
    }
    
    // Conserver les tokens de premi√®re connexion
    console.log('üßπ Nettoyage standardis√© effectu√© pour:', userType || 'tous types');
};

// ‚úÖ NOUVELLE FONCTION : Tentative de reconnexion automatique
const attemptAutoReconnect = async () => {
    console.log('üîÑ Tentative de reconnexion automatique...');
    
    try {
        // R√©cup√©rer les informations de connexion stock√©es
        const medecinData = localStorage.getItem('medecin');
        const patientData = localStorage.getItem('patient');
        
        if (medecinData) {
            try {
                const parsedMedecin = JSON.parse(medecinData);
                if (parsedMedecin.numero_adeli) {
                    console.log('üîÑ Tentative de reconnexion m√©decin avec:', parsedMedecin.numero_adeli);
                    
                    // Appel de connexion sans mot de passe (juste pour v√©rifier l'identifiant)
                    const response = await axios.post('http://localhost:3000/api/ProfessionnelSante/auth/check-identifier', {
                        numero_adeli: parsedMedecin.numero_adeli
                    }, {
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    });
                    
                    if (response.data.success) {
                        console.log('‚úÖ Identifiant m√©decin v√©rifi√©, tentative de r√©cup√©ration du profil...');
                        
                        // Essayer de r√©cup√©rer le profil avec les donn√©es stock√©es
                        const profileResponse = await axios.get('http://localhost:3000/api/ProfessionnelSante/profile', {
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            }
                        });
                        
                        if (profileResponse.data && profileResponse.data.professionnel) {
                            console.log('‚úÖ Profil m√©decin r√©cup√©r√©, mise √† jour des donn√©es...');
                            localStorage.setItem('medecin', JSON.stringify(profileResponse.data.professionnel));
                            return true;
                        }
                    }
                }
            } catch (e) {
                console.log('‚ö†Ô∏è Erreur lors de la reconnexion m√©decin:', e.message);
            }
        }
        
        if (patientData) {
            try {
                const parsedPatient = JSON.parse(patientData);
                if (parsedPatient.numero_assure) {
                    console.log('üîÑ Tentative de reconnexion patient avec:', parsedPatient.numero_assure);
                    
                    // Appel de connexion sans mot de passe (juste pour v√©rifier l'identifiant)
                    const response = await axios.post('http://localhost:3000/api/patient/auth/check-identifier', {
                        numero_assure: parsedPatient.numero_assure
                    }, {
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    });
                    
                    if (response.data.success) {
                        console.log('‚úÖ Identifiant patient v√©rifi√©, tentative de r√©cup√©ration du profil...');
                        
                        // Essayer de r√©cup√©rer le profil avec les donn√©es stock√©es
                        const profileResponse = await axios.get('http://localhost:3000/api/patient/auth/me', {
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            }
                        });
                        
                        if (profileResponse.data && profileResponse.data.data && profileResponse.data.data.patient) {
                            console.log('‚úÖ Profil patient r√©cup√©r√©, mise √† jour des donn√©es...');
                            localStorage.setItem('patient', JSON.stringify(profileResponse.data.data.patient));
                            return true;
                        }
                    }
                }
            } catch (e) {
                console.log('‚ö†Ô∏è Erreur lors de la reconnexion patient:', e.message);
            }
        }
        
        console.log('‚ùå Reconnexion automatique √©chou√©e');
        return false;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la reconnexion automatique:', error);
        return false;
    }
};

// ‚úÖ NOUVELLE FONCTION : Tentative de rafra√Æchissement automatique du token
const attemptTokenRefresh = async () => {
    console.log('üîÑ Tentative de rafra√Æchissement automatique du token...');
    
    try {
        // D√©terminer le type d'utilisateur et l'endpoint appropri√©
        const medecinData = localStorage.getItem('medecin');
        const patientData = localStorage.getItem('patient');
        
        let endpoint = '';
        let payload = {};
        
        if (medecinData) {
            try {
                const parsedMedecin = JSON.parse(medecinData);
                if (parsedMedecin.numero_adeli) {
                    endpoint = '/ProfessionnelSante/auth/refresh-token';
                    payload = { numero_adeli: parsedMedecin.numero_adeli };
                }
            } catch (e) {
                console.log('‚ö†Ô∏è Erreur parsing donn√©es m√©decin:', e.message);
            }
        } else if (patientData) {
            try {
                const parsedPatient = JSON.parse(patientData);
                if (parsedPatient.numero_assure) {
                    endpoint = '/patient/auth/refresh-token';
                    payload = { numero_assure: parsedPatient.numero_assure };
                }
            } catch (e) {
                console.log('‚ö†Ô∏è Erreur parsing donn√©es patient:', e.message);
            }
        }
        
        if (!endpoint) {
            console.log('‚ùå Impossible de d√©terminer l\'endpoint de rafra√Æchissement');
            return null;
        }
        
        console.log('üîÑ Appel de rafra√Æchissement sur:', endpoint, 'avec payload:', payload);
        
        // Appel √† l'API de rafra√Æchissement (sans token pour √©viter les boucles)
        const response = await axios.post(`http://localhost:3000/api${endpoint}`, payload, {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        if (response.data.token || response.data.jwt) {
            const newToken = response.data.token || response.data.jwt;
            console.log('‚úÖ Nouveau token obtenu:', newToken.substring(0, 30) + '...');
            
            // Mettre √† jour le token appropri√© selon le type d'utilisateur
            if (endpoint.includes('patient')) {
                localStorage.setItem('jwt', newToken);
                localStorage.setItem('originalJWT', newToken);
            } else {
                localStorage.setItem('token', newToken);
                localStorage.setItem('originalJWT', newToken);
            }
            
            return newToken;
        }
        
        console.log('‚ùå Aucun token re√ßu de l\'API de rafra√Æchissement');
        return null;
        
    } catch (error) {
        console.error('‚ùå Erreur lors du rafra√Æchissement automatique:', error);
        return null;
    }
};

// ‚úÖ CORRECTION : Fonction pour r√©cup√©rer le bon token d'authentification
const getValidAuthToken = () => {
    console.log('üîç DEBUG - getValidAuthToken - D√©but de la recherche...');
    
    // ‚úÖ PRIORIT√â 1 : originalJWT (le plus fiable - JWT de premi√®re connexion)
    const originalJWT = localStorage.getItem('originalJWT');
    console.log('üîç DEBUG - originalJWT trouv√©:', originalJWT ? `${originalJWT.substring(0, 20)}...` : 'Absent');
    if (originalJWT && !originalJWT.startsWith('temp_') && !originalJWT.startsWith('auth_')) {
        console.log('‚úÖ originalJWT trouv√© et valide - Longueur:', originalJWT.length);
        console.log('üîç DEBUG - Format originalJWT:', originalJWT.startsWith('eyJ') ? 'Format JWT standard' : 'Format non-JWT');
        return originalJWT;
    }
    
    // ‚úÖ PRIORIT√â 2 : firstConnectionToken (fallback)
    const firstConnectionToken = localStorage.getItem('firstConnectionToken');
    console.log('üîç DEBUG - firstConnectionToken trouv√©:', firstConnectionToken ? `${firstConnectionToken.substring(0, 20)}...` : 'Absent');
    if (firstConnectionToken && !firstConnectionToken.startsWith('temp_') && !firstConnectionToken.startsWith('auth_')) {
        console.log('‚úÖ firstConnectionToken trouv√© et valide - Longueur:', firstConnectionToken.length);
        console.log('üîç DEBUG - Format firstConnectionToken:', firstConnectionToken.startsWith('eyJ') ? 'Format JWT standard' : 'Format non-JWT');
        return firstConnectionToken;
    }

    // ‚úÖ PRIORIT√â 3 : JWT actuel (si disponible et valide)
    const jwtToken = localStorage.getItem('jwt');
    console.log('üîç DEBUG - JWT trouv√©:', jwtToken ? `${jwtToken.substring(0, 20)}...` : 'Absent');
    if (jwtToken && !jwtToken.startsWith('temp_') && !jwtToken.startsWith('auth_')) {
        console.log('‚úÖ JWT trouv√© et valide - Longueur:', jwtToken.length);
        console.log('üîç DEBUG - Format JWT:', jwtToken.startsWith('eyJ') ? 'Format JWT standard' : 'Format non-JWT');
        return jwtToken;
    }

    // ‚úÖ PRIORIT√â 4 : Token g√©n√©ral (fallback) - V√âRIFICATION STRICTE
    const generalToken = localStorage.getItem('token') || localStorage.getItem('generalToken');
    console.log('üîç DEBUG - Token g√©n√©ral trouv√©:', generalToken ? `${generalToken.substring(0, 20)}...` : 'Absent');
    
    if (generalToken) {
        console.log('üîç DEBUG - Analyse du token g√©n√©ral:', {
            longueur: generalToken.length,
            commenceParEyJ: generalToken.startsWith('eyJ'),
            commenceParTemp: generalToken.startsWith('temp_'),
            commenceParAuth: generalToken.startsWith('auth_'),
            format: generalToken.startsWith('eyJ') ? 'JWT standard' : 'Non-JWT'
        });
        
        // ‚úÖ V√âRIFICATION STRICTE : Le token doit √™tre un JWT valide
        if (generalToken.startsWith('eyJ') && generalToken.length > 100 && !generalToken.startsWith('temp_') && !generalToken.startsWith('auth_')) {
            console.log('‚úÖ Token g√©n√©ral JWT valide trouv√© - Longueur:', generalToken.length);
            return generalToken;
        } else {
            console.log('‚ùå Token g√©n√©ral rejet√© - Format invalide ou temporaire');
        }
    }

    // ‚úÖ PRIORIT√â 5 : V√©rifier les tokens stock√©s dans les donn√©es utilisateur (originalToken/originalJWT)
    const medecinData = localStorage.getItem('medecin');
    if (medecinData) {
        try {
            const parsedMedecin = JSON.parse(medecinData);
            console.log('üîç DEBUG - Donn√©es m√©decin pars√©es, cl√©s disponibles:', Object.keys(parsedMedecin));
            
            if (parsedMedecin.originalJWT && !parsedMedecin.originalJWT.startsWith('temp_') && !parsedMedecin.originalJWT.startsWith('auth_')) {
                console.log('‚úÖ JWT original du m√©decin trouv√© dans les donn√©es stock√©es - Longueur:', parsedMedecin.originalJWT.length);
                console.log('üîç DEBUG - Format JWT original:', parsedMedecin.originalJWT.startsWith('eyJ') ? 'Format JWT standard' : 'Format non-JWT');
                return parsedMedecin.originalJWT;
            }
            if (parsedMedecin.originalToken && !parsedMedecin.originalToken.startsWith('temp_') && !parsedMedecin.originalToken.startsWith('auth_')) {
                console.log('‚úÖ Token original du m√©decin trouv√© dans les donn√©es stock√©es - Longueur:', parsedMedecin.originalToken.length);
                console.log('üîç DEBUG - Format token original:', parsedMedecin.originalToken.startsWith('eyJ') ? 'Format JWT standard' : 'Format non-JWT');
                return parsedMedecin.originalToken;
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Erreur lors du parsing des donn√©es m√©decin:', error.message);
        }
    }

    console.log('‚ùå Aucun token d\'authentification valide trouv√©');
    
    // üîç DIAGNOSTIC COMPLET : Analyser tous les tokens disponibles
    console.log('üîç DIAGNOSTIC COMPLET - Analyse de tous les tokens:');
    
    const allTokens = {
        originalJWT: localStorage.getItem('originalJWT'),
        firstConnectionToken: localStorage.getItem('firstConnectionToken'),
        jwt: localStorage.getItem('jwt'),
        token: localStorage.getItem('token'),
        medecin: localStorage.getItem('medecin')
    };
    
    Object.entries(allTokens).forEach(([key, value]) => {
        if (value) {
            console.log(`  üîç ${key}:`, {
                present: 'Pr√©sent',
                longueur: value.length,
                preview: value.substring(0, 30) + '...',
                format: value.startsWith('eyJ') ? 'JWT standard' : 'Non-JWT',
                commenceParTemp: value.startsWith('temp_'),
                commenceParAuth: value.startsWith('auth_'),
                valide: value.startsWith('eyJ') && value.length > 100 && !value.startsWith('temp_') && !value.startsWith('auth_')
            });
        } else {
            console.log(`  ‚ùå ${key}: Absent`);
        }
    });
    
    // üîç V√âRIFIER LES DONN√âES M√âDECIN STOCK√âES
    if (allTokens.medecin) {
        try {
            const parsedMedecin = JSON.parse(allTokens.medecin);
            console.log('üîç Donn√©es m√©decin stock√©es:', {
                cl√©s: Object.keys(parsedMedecin),
                aOriginalJWT: !!parsedMedecin.originalJWT,
                aOriginalToken: !!parsedMedecin.originalToken,
                originalJWTValide: parsedMedecin.originalJWT ? (parsedMedecin.originalJWT.startsWith('eyJ') && parsedMedecin.originalJWT.length > 100) : false,
                originalTokenValide: parsedMedecin.originalToken ? (parsedMedecin.originalToken.startsWith('eyJ') && parsedMedecin.originalToken.length > 100) : false
            });
        } catch (error) {
            console.log('‚ö†Ô∏è Erreur parsing donn√©es m√©decin:', error.message);
        }
    }
    
    // üö® DERNIER RECOURS : Tentative de r√©cup√©ration d'urgence
    console.log('üö® DERNIER RECOURS - Tentative de r√©cup√©ration d\'urgence...');
    const emergencyToken = emergencyTokenRecovery();
    if (emergencyToken) {
        console.log('‚úÖ R√âCUP√âRATION D\'URGENCE R√âUSSIE - Token restaur√©');
        return emergencyToken;
    }
    
    return null;
};

// ‚úÖ CORRECTION : Fonction pour nettoyer les tokens temporaires
const cleanupTemporaryTokens = () => {
    console.log('üßπ Nettoyage des tokens temporaires...');
    
    const keysToCheck = ['tempTokenId', 'tempToken', 'temp_'];
    let cleanedCount = 0;
    
    // ‚úÖ CORRECTION : V√©rifier si un token valide existe avant de nettoyer
    const hasValidToken = !!(localStorage.getItem('jwt') || localStorage.getItem('token'));
    
    if (hasValidToken) {
        console.log('üîê Token valide d√©tect√©, nettoyage s√©lectif des tokens temporaires uniquement');
        
        // Ne nettoyer que les cl√©s qui commencent par 'temp_' ET qui ne sont pas le token principal
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key) {
                const value = localStorage.getItem(key);
                // ‚úÖ CORRECTION : Ne pas supprimer le token principal m√™me s'il commence par 'temp_'
                if (value && value.startsWith('temp_') && key !== 'token') {
                    console.log(`üßπ Suppression du token temporaire: ${key}`);
                    localStorage.removeItem(key);
                    cleanedCount++;
                }
            }
        }
    } else {
            console.log('‚ö†Ô∏è Aucun token valide d√©tect√©, nettoyage complet des tokens temporaires');
            
            // Nettoyer tous les tokens temporaires
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key) {
                    const value = localStorage.getItem(key);
                    if (value && keysToCheck.some(tempKey => value.startsWith(tempKey))) {
                        console.log(`üßπ Suppression du token temporaire: ${key}`);
                        localStorage.removeItem(key);
                        cleanedCount++;
                    }
                }
            }
        }
    
    console.log(`‚úÖ ${cleanedCount} tokens temporaires nettoy√©s`);
    return cleanedCount;
};

// üö® FONCTION DE R√âCUP√âRATION D'URGENCE : Essayer de restaurer un token valide
const emergencyTokenRecovery = () => {
    console.log('üö® R√âCUP√âRATION D\'URGENCE - Tentative de restauration d\'un token valide...');
    
    // 1. V√©rifier les donn√©es m√©decin stock√©es
    const medecinData = localStorage.getItem('medecin');
    if (medecinData) {
        try {
            const parsedMedecin = JSON.parse(medecinData);
            console.log('üîç Donn√©es m√©decin disponibles pour r√©cup√©ration:', Object.keys(parsedMedecin));
            
            // Essayer de r√©cup√©rer originalJWT ou originalToken
            if (parsedMedecin.originalJWT && parsedMedecin.originalJWT.startsWith('eyJ') && parsedMedecin.originalJWT.length > 100) {
                console.log('‚úÖ R√âCUP√âRATION R√âUSSIE - originalJWT restaur√© depuis les donn√©es stock√©es');
                localStorage.setItem('jwt', parsedMedecin.originalJWT);
                localStorage.setItem('token', parsedMedecin.originalJWT);
                return parsedMedecin.originalJWT;
            }
            
            if (parsedMedecin.originalToken && parsedMedecin.originalToken.startsWith('eyJ') && parsedMedecin.originalToken.length > 100) {
                console.log('‚úÖ R√âCUP√âRATION R√âUSSIE - originalToken restaur√© depuis les donn√©es stock√©es');
                localStorage.setItem('jwt', parsedMedecin.originalToken);
                localStorage.setItem('token', parsedMedecin.originalToken);
                return parsedMedecin.originalToken;
            }
            
        } catch (error) {
            console.log('‚ö†Ô∏è Erreur lors de la r√©cup√©ration d\'urgence:', error.message);
        }
    }
    
    console.log('‚ùå R√âCUP√âRATION D\'URGENCE √âCHOU√âE - Aucun token valide trouv√©');
    return null;
};

// ‚úÖ CORRECTION : Fonction pour v√©rifier l'√©tat d'authentification
export const checkAuthenticationStatus = () => {
    console.log('üîç V√©rification de l\'√©tat d\'authentification...');
    
    const jwtToken = localStorage.getItem('jwt') || localStorage.getItem('jwtToken');
    const generalToken = localStorage.getItem('token') || localStorage.getItem('generalToken');
    const tempTokenId = localStorage.getItem('tempTokenId');
    
    const status = {
        jwtToken: jwtToken ? '‚úÖ Pr√©sent' : '‚ùå Absent',
        generalToken: generalToken ? '‚úÖ Pr√©sent' : '‚ùå Absent',
        tempTokenId: tempTokenId ? '‚úÖ Pr√©sent' : '‚ùå Absent',
        hasValidToken: !!(jwtToken || (generalToken && !generalToken.startsWith('temp_'))),
        needsCleanup: !!(tempTokenId && tempTokenId.startsWith('temp_'))
    };
    
    console.log('üìä √âtat d\'authentification:', status);
    return status;
};

// ================================
// AUTHENTIFICATION G√âN√âRALE
// ================================

export const login = async (identifiant) => {
    try {
        const response = await api.post(`/auth/login`, identifiant);
        if (response.data.token) {
            localStorage.setItem('token', response.data.token);
        }
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de connexion";
    }
};

export const register = async (user) => {
    try {
        const response = await api.post(`/auth/register`, { user });
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur d'inscription";
    }
};

export const logout = async () => {
    try {
        const response = await api.post("/auth/logout");
        localStorage.removeItem("token");
        console.log("D√©connexion r√©ussie");
        return response.data;
    } catch (error) {
        // Nettoyer m√™me en cas d'erreur
        localStorage.removeItem("token");
        throw error.response?.data?.message || "Erreur de d√©connexion";
    }
};

export const me = async () => {
    try {
        const response = await api.get(`/auth/me`);
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de r√©cup√©ration des informations de la session";
    }
};

export const changePassword = async (user) => {
    try {
        const response = await api.put(`/auth/change-password`, { user });
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de modification du mot de passe";
    }
};

export const isAuthenticated = () => {
    console.log('üîç isAuthenticated - V√©rification authentification g√©n√©rale...');
    
    const token = localStorage.getItem('token');
    const jwt = localStorage.getItem('jwt');
    
    console.log('  - üîë Tokens v√©rifi√©s:');
    console.log('    - token:', token ? `‚úÖ Pr√©sent (${token.substring(0, 30)}...)` : '‚ùå Absent');
    console.log('    - jwt:', jwt ? `‚úÖ Pr√©sent (${jwt.substring(0, 30)}...)` : '‚ùå Absent');
    
    const hasToken = !!(token || jwt);
    console.log('  - ‚úÖ R√©sultat authentification g√©n√©rale:', hasToken ? 'Authentifi√©' : 'Non authentifi√©');
    
    return hasToken;
};

// ================================
// AUTHENTIFICATION PATIENT
// ================================

export const loginPatient = async (identifiant) => {
    try {
        console.log('üîµ Tentative de connexion patient avec:', identifiant);
        const response = await api.post(`/patient/auth/login`, identifiant);
        console.log('üîµ R√©ponse compl√®te du serveur:', response.data);
        
        // G√©rer diff√©rentes structures de r√©ponse possibles
        let token = null;
        let patientData = null;
        
        // V√©rifier si la 2FA est requise AVANT de traiter le token
        const requires2FA = response.data?.status === 'requires2FA' || 
                           response.data?.requires2FA || 
                           response.data?.message?.includes('2FA') ||
                           response.data?.message?.includes('double facteur') ||
                           response.data?.message?.includes('authentification') ||
                           response.data?.two_factor_required ||
                           response.data?.data?.two_factor_required;
        
        console.log('üîç Analyse de la r√©ponse 2FA:', {
            status: response.data?.status,
            requires2FA: response.data?.requires2FA,
            message: response.data?.message,
            two_factor_required: response.data?.two_factor_required,
            data_two_factor: response.data?.data?.two_factor_required,
            finalDecision: requires2FA
        });
        
        if (requires2FA) {
            console.log('üîê 2FA requise - pas de stockage du token pour le moment');
            // Ne pas stocker le token si la 2FA est requise
            // Le token sera stock√© apr√®s validation 2FA r√©ussie
        } else {
            // Connexion normale - extraire et stocker le token
            if (response.data.token) {
                token = response.data.token;
            } else if (response.data.data && response.data.data.token) {
                token = response.data.data.token;
            }
            
            if (response.data.data && response.data.data.patient) {
                patientData = response.data.data.patient;
            } else if (response.data.patient) {
                patientData = response.data.patient;
            } else if (response.data.data) {
                patientData = response.data.data;
            }
            
            console.log('üîµ Token extrait:', token);
            console.log('üîµ Donn√©es patient extraites:', patientData);
            
            if (token && patientData) {
                localStorage.setItem("jwt", token);
                localStorage.setItem("patient", JSON.stringify(patientData));
                console.log('üîµ Donn√©es stock√©es dans localStorage');
            } else {
                console.error('üîµ Donn√©es manquantes - token:', !!token, 'patientData:', !!patientData);
            }
        }
        
        return response.data;
    } catch (error) {
        console.error('üîµ Erreur de connexion patient:', error);
        throw error.response?.data?.message || "Erreur de connexion patient";
    }
};

export const getPatientProfile = async () => {
    try {
        const response = await api.get(`/patient/auth/me`);
        const patientProfile = response.data;
        if (patientProfile && patientProfile.data && patientProfile.data.patient) {
            localStorage.setItem("patient", JSON.stringify(patientProfile.data.patient));
            return patientProfile.data.patient;
        }
        return null;
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration du profil patient:", error);
        if (error.response?.status === 401) {
            localStorage.removeItem("jwt");
            localStorage.removeItem("patient");
        }
        throw error;
    }
};

export const logoutPatient = async () => {
    try {
        await api.post(`/patient/auth/logout`);
    } catch (error) {
        console.error("Erreur lors de la d√©connexion patient:", error);
    } finally {
        // Nettoyer les donn√©es m√™me en cas d'erreur
        localStorage.removeItem("jwt");
        localStorage.removeItem("patient");
    }
};

export const getStoredPatient = () => {
    try {
        const patient = localStorage.getItem("patient");
        return patient ? JSON.parse(patient) : null;
    } catch (error) {
        console.error('Erreur lors du parsing des donn√©es patient:', error);
        localStorage.removeItem("patient");
        return null;
    }
};

export const isPatientAuthenticated = () => {
    const token = localStorage.getItem('jwt');
    const patient = getStoredPatient();
    return !!(token && patient);
};

// ================================
// AUTHENTIFICATION PROFESSIONNEL DE SANT√â
// ================================

export const loginMedecin = async (identifiant) => {
    try {
        // Nettoyer les tokens existants pour √©viter les conflits
        localStorage.removeItem('jwt');
        
        const response = await api.post(`/ProfessionnelSante/auth/login`, identifiant);
        console.log('üîç R√©ponse compl√®te du serveur:', response.data);
        
        if (response.data.token) {
            // ‚úÖ SOLUTION SIMPLIFI√âE : Stocker le JWT de premi√®re connexion de mani√®re syst√©matique
            localStorage.setItem('token', response.data.token);
            localStorage.setItem('firstConnectionToken', response.data.token);
            localStorage.setItem('originalJWT', response.data.token); // üîë JWT pour r√©utilisation syst√©matique
            
            console.log('üîê LOGIN - JWT de premi√®re connexion conserv√©:', {
                token: response.data.token.substring(0, 20) + '...',
                stock√©eDans: ['token', 'firstConnectionToken', 'originalJWT'],
                longueur: response.data.token.length
            });
            
            // ‚úÖ AUSSI : Stocker dans les donn√©es utilisateur pour acc√®s facile
            if (response.data.data && response.data.data.professionnel) {
                response.data.data.professionnel.originalToken = response.data.token;
                response.data.data.professionnel.originalJWT = response.data.token;
            } else if (response.data.professionnel) {
                response.data.professionnel.originalToken = response.data.token;
                response.data.professionnel.originalJWT = response.data.token;
            }
        }
        
        // Stocker les donn√©es du m√©decin - analyser la structure exacte
        let medecinData = null;
        
        // Log d√©taill√© de la structure
        console.log('üìä Structure de la r√©ponse:');
        console.log('  - response.data:', response.data);
        console.log('  - response.data.data:', response.data.data);
        console.log('  - response.data.data.professionnel:', response.data.data?.professionnel);
        console.log('  - response.data.data.medecin:', response.data.data?.medecin);
        
        // Essayer diff√©rentes structures possibles
        if (response.data.medecin) {
            medecinData = response.data.medecin;
            console.log('‚úÖ Donn√©es trouv√©es dans response.data.medecin');
        } else if (response.data.professionnel) {
            medecinData = response.data.professionnel;
            console.log('‚úÖ Donn√©es trouv√©es dans response.data.professionnel');
        } else if (response.data.data && response.data.data.professionnel) {
            medecinData = response.data.data.professionnel;
            console.log('‚úÖ Donn√©es trouv√©es dans response.data.data.professionnel');
        } else if (response.data.data && response.data.data.medecin) {
            medecinData = response.data.data.medecin;
            console.log('‚úÖ Donn√©es trouv√©es dans response.data.data.medecin');
        } else if (response.data.data) {
            // Si data existe mais pas de sous-propri√©t√© sp√©cifique, utiliser data directement
            medecinData = response.data.data;
            console.log('‚úÖ Utilisation de response.data.data directement');
        }
        
        if (medecinData) {
            console.log('‚úÖ Donn√©es m√©decin extraites:', medecinData);
            
            // V√©rifier si les donn√©es contiennent les informations n√©cessaires
            if (!medecinData.nom && !medecinData.prenom) {
                console.log('‚ö†Ô∏è Donn√©es extraites mais nom/pr√©nom manquants, recherche dans la structure...');
                
                // Chercher dans les propri√©t√©s imbriqu√©es
                const allKeys = Object.keys(medecinData);
                console.log('üîç Toutes les cl√©s disponibles:', allKeys);
                
                // Essayer de trouver les informations dans d'autres propri√©t√©s
                for (const key of allKeys) {
                    const value = medecinData[key];
                    if (typeof value === 'object' && value !== null) {
                        console.log(`üîç Exploration de ${key}:`, value);
                        if (value.nom || value.prenom || value.specialite) {
                            medecinData = { ...medecinData, ...value };
                            console.log('‚úÖ Informations trouv√©es dans', key, ':', value);
                            break;
                        }
                    }
                }
            }
            
            localStorage.setItem('medecin', JSON.stringify(medecinData));
        } else {
            console.log('‚ö†Ô∏è Aucune donn√©e m√©decin trouv√©e dans la r√©ponse');
            
            // Essayer d'extraire les informations du token
            if (response.data.token) {
                const tokenInfo = extractMedecinFromToken(response.data.token);
                if (tokenInfo) {
                    console.log('‚úÖ Utilisation des informations du token');
                    localStorage.setItem('medecin', JSON.stringify(tokenInfo));
                } else {
                    // Cr√©er un objet m√©decin minimal
                    const minimalMedecin = {
                        id: response.data.data?.professionnel_id || response.data.data?.medecin_id || 'unknown',
                        nom: 'M√©decin',
                        prenom: 'Connect√©',
                        role: 'medecin',
                        specialite: 'G√©n√©raliste'
                    };
                    localStorage.setItem('medecin', JSON.stringify(minimalMedecin));
                    console.log('üì¶ M√©decin minimal cr√©√©:', minimalMedecin);
                }
            } else {
                // Cr√©er un objet m√©decin minimal
                const minimalMedecin = {
                    id: response.data.data?.professionnel_id || response.data.data?.medecin_id || 'unknown',
                    nom: 'M√©decin',
                    prenom: 'Connect√©',
                    role: 'medecin',
                    specialite: 'G√©n√©raliste'
                };
                localStorage.setItem('medecin', JSON.stringify(minimalMedecin));
                console.log('üì¶ M√©decin minimal cr√©√©:', minimalMedecin);
            }
        }
        
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de connexion m√©decin";
    }
};

export const getMedecinProfile = async () => {
    try {
        const response = await api.get(`/ProfessionnelSante/auth/me`);
        // On s'assure de la structure
        const professionnel = response.data?.data?.professionnel || response.data?.professionnel;
        if (professionnel) {
            localStorage.setItem('medecin', JSON.stringify(professionnel));
        }
        return response.data;
    } catch (error) {
        // Ne pas lancer d'erreur pour √©viter la d√©connexion automatique
        // Retourner les donn√©es stock√©es localement si disponibles
        const storedMedecin = getStoredMedecin();
        if (storedMedecin) {
            return { data: { professionnel: storedMedecin } };
        }
        throw error;
    }
};

export const logoutMedecin = async () => {
    try {
        await api.post(`/ProfessionnelSante/auth/logout`);
        console.log("‚úÖ D√©connexion m√©decin r√©ussie c√¥t√© serveur");
    } catch (error) {
        console.error("Erreur lors de la d√©connexion m√©decin:", error);
    } finally {
        // Nettoyer les donn√©es m√™me en cas d'erreur
        localStorage.removeItem("token");
        localStorage.removeItem("medecin");
        console.log("üóëÔ∏è Token et donn√©es m√©decin supprim√©s du localStorage");
    }
};

export const changePasswordMedecin = async (user) => {
    try {
        const response = await api.put(`/ProfessionnelSante/auth/change-password`, { user });
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de modification du mot de passe";
    }
};

export const getStoredMedecin = () => {
    try {
        console.log('üîç getStoredMedecin - R√©cup√©ration des donn√©es m√©decin...');
        
        const medecinRaw = localStorage.getItem("medecin");
        console.log('  - Donn√©es brutes r√©cup√©r√©es:', medecinRaw ? `‚úÖ Pr√©sentes (${medecinRaw.length} chars)` : '‚ùå Absentes');
        
        if (!medecinRaw) {
            console.log('  - ‚ùå Aucune donn√©e m√©decin trouv√©e dans localStorage');
            return null;
        }
        
        // ‚úÖ NOUVEAU : V√©rification du format des donn√©es
        let medecin = null;
        try {
            medecin = JSON.parse(medecinRaw);
            console.log('  - ‚úÖ Donn√©es JSON pars√©es avec succ√®s');
        } catch (parseError) {
            console.error('  - ‚ùå Erreur lors du parsing JSON:', parseError.message);
            console.log('  - üîç Tentative de nettoyage des donn√©es...');
            
            // Tentative de nettoyage des donn√©es corrompues
            try {
                const cleanedData = medecinRaw.replace(/[^\x20-\x7E]/g, ''); // Supprimer les caract√®res non-ASCII
                medecin = JSON.parse(cleanedData);
                console.log('  - ‚úÖ Donn√©es nettoy√©es et pars√©es avec succ√®s');
            } catch (cleanError) {
                console.error('  - ‚ùå Impossible de nettoyer les donn√©es:', cleanError.message);
                localStorage.removeItem("medecin");
                return null;
            }
        }
        
        if (medecin) {
            console.log('  - üìä Donn√©es m√©decin r√©cup√©r√©es:');
            console.log('    - Type:', typeof medecin);
            console.log('    - Cl√©s disponibles:', Object.keys(medecin));
            console.log('    - ID:', medecin.id_professionnel || medecin.id || 'N/A');
            console.log('    - Nom:', medecin.nom || 'N/A');
            console.log('    - Pr√©nom:', medecin.prenom || 'N/A');
        }
        
        return medecin;
        
    } catch (error) {
        console.error('‚ùå getStoredMedecin - Erreur g√©n√©rale:', error);
        console.log('  - üîç Tentative de nettoyage des donn√©es corrompues...');
        
        try {
            localStorage.removeItem("medecin");
            console.log('  - ‚úÖ Donn√©es m√©decin supprim√©es du localStorage');
        } catch (cleanupError) {
            console.error('  - ‚ùå Erreur lors du nettoyage:', cleanupError.message);
        }
        
        return null;
    }
};

export const isMedecinAuthenticated = () => {
    console.log('üîç isMedecinAuthenticated - D√©but de la v√©rification...');
    
    const token = localStorage.getItem('token');
    const medecin = getStoredMedecin();
    
    // ‚úÖ NOUVEAU : Logs d√©taill√©s des tokens et donn√©es
    console.log('  - üîë Token r√©cup√©r√©:', token ? `‚úÖ Pr√©sent (${token.substring(0, 30)}...)` : '‚ùå Absent');
    console.log('  - üë®‚Äç‚öïÔ∏è Donn√©es m√©decin r√©cup√©r√©es:', medecin ? '‚úÖ Pr√©sentes' : '‚ùå Absentes');
    
    if (medecin) {
        console.log('  - üìä D√©tails des donn√©es m√©decin:');
        console.log('    - ID:', medecin.id_professionnel || medecin.id || 'N/A');
        console.log('    - Nom:', medecin.nom || 'N/A');
        console.log('    - Pr√©nom:', medecin.prenom || 'N/A');
        console.log('    - R√¥le:', medecin.role || 'N/A');
        console.log('    - Sp√©cialit√©:', medecin.specialite || 'N/A');
    }
    
    // ‚úÖ NOUVEAU : V√©rification d√©taill√©e de l'authentification
    const hasToken = !!token;
    const hasMedecinData = !!medecin;
    const isAuth = hasToken && hasMedecinData;
    
    console.log('  - üîç Analyse de l\'authentification:');
    console.log('    - Token pr√©sent:', hasToken);
    console.log('    - Donn√©es m√©decin pr√©sentes:', hasMedecinData);
    console.log('    - R√©sultat final:', isAuth ? '‚úÖ Authentifi√©' : '‚ùå Non authentifi√©');
    
    if (!isAuth) {
        console.log('  - ‚ö†Ô∏è Raison de l\'√©chec:');
        if (!hasToken) console.log('    - Token manquant');
        if (!hasMedecinData) console.log('    - Donn√©es m√©decin manquantes');
    }
    
    return isAuth;
};

// Fonction pour r√©cup√©rer les informations compl√®tes du m√©decin
export const fetchMedecinDetails = async () => {
    try {
        console.log('üîç R√©cup√©ration des d√©tails du m√©decin...');
        
        // ‚úÖ CORRECTION : Nettoyer les tokens temporaires d'abord
        cleanupTemporaryTokens();
        
        // ‚úÖ CORRECTION : R√©cup√©rer le bon token d'authentification
        const authToken = getValidAuthToken();
        if (!authToken) {
            console.log('‚ùå Aucun token d\'authentification valide disponible');
            throw new Error('Token d\'authentification manquant');
        }
        
        console.log('üîë Token d\'authentification utilis√©:', authToken.substring(0, 20) + '...');
        
        // ‚úÖ CORRECTION : Configurer l'API avec le bon token
        const response = await api.get('/ProfessionnelSante/profile', {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });
        
        console.log('‚úÖ R√©ponse re√ßue de /ProfessionnelSante/profile:', response.data);
        
        if (response.data && response.data.professionnel) {
            const medecinData = response.data.professionnel;
            
            // ‚úÖ CORRECTION : S'assurer que la sp√©cialit√© est bien r√©cup√©r√©e
            if (!medecinData.specialite && medecinData.specialite_id) {
                console.log('üîç Sp√©cialit√© ID trouv√©e, r√©cup√©ration des d√©tails...');
                try {
                    const specialiteResponse = await api.get(`/ProfessionnelSante/specialite/${medecinData.specialite_id}`, {
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });
                    if (specialiteResponse.data && specialiteResponse.data.nom) {
                        medecinData.specialite = specialiteResponse.data.nom;
                        console.log('‚úÖ Sp√©cialit√© r√©cup√©r√©e:', medecinData.specialite);
                    }
                } catch (specialiteError) {
                    console.log('‚ö†Ô∏è Impossible de r√©cup√©rer la sp√©cialit√©, utilisation de la valeur par d√©faut');
                    medecinData.specialite = 'G√©n√©raliste';
                }
            }
            
            localStorage.setItem('medecin', JSON.stringify(medecinData));
            console.log('‚úÖ Donn√©es m√©decin mises √† jour:', medecinData);
            return medecinData;
        }
        
        console.log('‚ö†Ô∏è Structure de r√©ponse inattendue:', response.data);
        return null;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©tails:', error);
        
        if (error.response) {
            console.error('üîç D√©tails de l\'erreur:', {
                status: error.response.status,
                statusText: error.response.statusText,
                data: error.response.data,
                headers: error.response.headers
            });
        }
        
        // ‚úÖ CORRECTION : Tentative de r√©cup√©ration des donn√©es stock√©es localement
        console.log('üîç Tentative de r√©cup√©ration des donn√©es stock√©es localement...');
        const storedMedecin = getStoredMedecin();
        if (storedMedecin) {
            console.log('‚úÖ Utilisation des donn√©es stock√©es localement:', storedMedecin);
            return storedMedecin;
        }
        
        throw error;
    }
};

// ‚úÖ NOUVELLE FONCTION : R√©cup√©rer la liste des patients
export const fetchPatientsList = async () => {
    try {
        console.log('üîç R√©cup√©ration de la liste des patients...');
        
        // ‚úÖ CORRECTION : Nettoyer les tokens temporaires d'abord
        cleanupTemporaryTokens();
        
        // ‚úÖ CORRECTION : R√©cup√©rer le bon token d'authentification
        const authToken = getValidAuthToken();
        if (!authToken) {
            console.log('‚ùå Aucun token d\'authentification valide disponible');
            throw new Error('Token d\'authentification manquant');
        }
        
        console.log('üîë Token d\'authentification utilis√©:', authToken.substring(0, 20) + '...');
        
        // ‚úÖ AM√âLIORATION : Essayer plusieurs endpoints possibles
        let response = null;
        let endpoint = '';
        
        // Essayer d'abord l'endpoint principal
        try {
            endpoint = '/ProfessionnelSante/patients';
            console.log('üîç Tentative avec endpoint:', endpoint);
            response = await api.get(endpoint, {
                headers: {
                    'Authorization': `Bearer ${authToken}`
                }
            });
            console.log('‚úÖ R√©ponse re√ßue de', endpoint, ':', response.data);
        } catch (error) {
            console.log('‚ö†Ô∏è √âchec avec', endpoint, ', tentative avec endpoint alternatif...');
            
            // Essayer l'endpoint alternatif
            try {
                endpoint = '/ProfessionnelSante/patient/list';
                console.log('üîç Tentative avec endpoint alternatif:', endpoint);
                response = await api.get(endpoint, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                console.log('‚úÖ R√©ponse re√ßue de', endpoint, ':', response.data);
            } catch (error2) {
                console.log('‚ö†Ô∏è √âchec avec', endpoint, ', tentative avec endpoint de base...');
                
                // Essayer l'endpoint de base
                try {
                    endpoint = '/ProfessionnelSante/patient';
                    console.log('üîç Tentative avec endpoint de base:', endpoint);
                    response = await api.get(endpoint, {
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });
                    console.log('‚úÖ R√©ponse re√ßue de', endpoint, ':', response.data);
                } catch (error3) {
                    console.error('‚ùå Tous les endpoints ont √©chou√© pour la r√©cup√©ration des patients');
                    throw error3;
                }
            }
        }
        
        if (response && response.data) {
            console.log('üîç Structure de la r√©ponse analys√©e:', {
                hasData: !!response.data,
                dataType: typeof response.data,
                isArray: Array.isArray(response.data),
                keys: response.data ? Object.keys(response.data) : [],
                dataPreview: response.data ? JSON.stringify(response.data).substring(0, 200) + '...' : 'null'
            });
            
            let patients = [];
            
            // ‚úÖ GESTION INTELLIGENTE DES STRUCTURES DE R√âPONSE
            if (response.data.patients && Array.isArray(response.data.patients)) {
                // Structure : { patients: [...] }
                patients = response.data.patients;
                console.log('‚úÖ Patients extraits de response.data.patients:', patients.length);
            } else if (response.data.patient && Array.isArray(response.data.patient)) {
                // Structure : { patient: [...] }
                patients = response.data.patient;
                console.log('‚úÖ Patients extraits de response.data.patient:', patients.length);
            } else if (response.data.data && Array.isArray(response.data.data)) {
                // Structure : { data: [...] }
                patients = response.data.data;
                console.log('‚úÖ Patients extraits de response.data.data:', patients.length);
            } else if (Array.isArray(response.data)) {
                // Structure : [...] directement
                patients = response.data;
                console.log('‚úÖ Patients extraits directement de response.data:', patients.length);
            } else if (response.data.results && Array.isArray(response.data.results)) {
                // Structure : { results: [...] }
                patients = response.data.results;
                console.log('‚úÖ Patients extraits de response.data.results:', patients.length);
            } else {
                console.log('‚ö†Ô∏è Structure de r√©ponse non reconnue, tentative d\'extraction manuelle...');
                
                // Essayer de trouver des patients dans la r√©ponse
                const searchForPatients = (obj, depth = 0) => {
                    if (depth > 3) return null; // √âviter la r√©cursion infinie
                    
                    for (const [key, value] of Object.entries(obj)) {
                        if (Array.isArray(value) && value.length > 0) {
                            // V√©rifier si c'est un tableau de patients
                            const firstItem = value[0];
                            if (firstItem && (firstItem.nom || firstItem.prenom || firstItem.numero_assure || firstItem.id_patient)) {
                                console.log('‚úÖ Patients trouv√©s dans', key, ':', value.length);
                                return value;
                            }
                        } else if (typeof value === 'object' && value !== null) {
                            const result = searchForPatients(value, depth + 1);
                            if (result) return result;
                        }
                    }
                    return null;
                };
                
                const foundPatients = searchForPatients(response.data);
                if (foundPatients) {
                    patients = foundPatients;
                    console.log('‚úÖ Patients extraits par recherche r√©cursive:', patients.length);
                }
            }
            
            if (patients.length > 0) {
                console.log('‚úÖ Liste des patients r√©cup√©r√©e avec succ√®s:', {
                    count: patients.length,
                    firstPatient: patients[0],
                    lastPatient: patients[patients.length - 1],
                    sampleNames: patients.slice(0, 3).map(p => p.nom || p.prenom || 'N/A')
                });
                return patients;
            } else {
                console.log('‚ö†Ô∏è Aucun patient trouv√© dans la r√©ponse');
                return [];
            }
        }
        
        console.log('‚ö†Ô∏è R√©ponse invalide ou vide');
        return [];
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de la liste des patients:', error);
        
        if (error.response) {
            console.error('üîç D√©tails de l\'erreur:', {
                status: error.response.status,
                statusText: error.response.statusText,
                data: error.response.data,
                headers: error.response.headers
            });
        }
        
        return [];
    }
};

// ‚úÖ NOUVELLE FONCTION : R√©cup√©rer les dossiers patients
export const fetchPatientFiles = async () => {
    try {
        console.log('üîç R√©cup√©ration des dossiers patients...');
        
        // ‚úÖ CORRECTION : Nettoyer les tokens temporaires d'abord
        cleanupTemporaryTokens();
        
        // ‚úÖ CORRECTION : R√©cup√©rer le bon token d'authentification
        const authToken = getValidAuthToken();
        if (!authToken) {
            console.log('‚ùå Aucun token d\'authentification valide disponible');
            throw new Error('Token d\'authentification manquant');
        }
        
        console.log('üîë Token d\'authentification utilis√©:', authToken.substring(0, 20) + '...');
        
        const response = await api.get(`/ProfessionnelSante/dossiers-patients`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });
        console.log('‚úÖ Dossiers patients re√ßus:', response.data);
        
        if (response.data && response.data.dossiers) {
            return response.data.dossiers;
        } else if (response.data && Array.isArray(response.data)) {
            return response.data;
        }
        
        return [];
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des dossiers patients:', error);
        
        if (error.response) {
            console.error('üîç D√©tails de l\'erreur:', {
                status: error.response.status,
                statusText: error.response.statusText,
                data: error.response.data
            });
        }
        
        return [];
    }
};

// ‚úÖ NOUVELLE FONCTION : R√©cup√©rer un dossier patient sp√©cifique
export const fetchPatientFile = async (patientId) => {
    try {
        console.log(`üîç R√©cup√©ration du dossier patient ${patientId}...`);
        
        // ‚úÖ CORRECTION : Nettoyer les tokens temporaires d'abord
        cleanupTemporaryTokens();
        
        // ‚úÖ CORRECTION : R√©cup√©rer le bon token d'authentification
        const authToken = getValidAuthToken();
        if (!authToken) {
            console.log('‚ùå Aucun token d\'authentification valide disponible');
            throw new Error('Token d\'authentification manquant');
        }
        
        console.log('üîë Token d\'authentification utilis√©:', authToken.substring(0, 20) + '...');
        
        const response = await api.get(`/ProfessionnelSante/dossier-patient/${patientId}`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });
        console.log('‚úÖ Dossier patient re√ßu:', response.data);
        
        if (response.data && response.data.dossier) {
            return response.data.dossier;
        } else if (response.data) {
            return response.data;
        }
        
        return null;
    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration du dossier patient ${patientId}:`, error);
        
        if (error.response) {
            console.error('üîç D√©tails de l\'erreur:', {
                status: error.response.status,
                statusText: error.response.statusText,
                data: error.response.data
            });
        }
        
        return null;
    }
};

// ‚úÖ NOUVELLE FONCTION : R√©cup√©rer les consultations
export const fetchConsultations = async () => {
    try {
        console.log('üîç R√©cup√©ration des consultations...');
        
        // ‚úÖ CORRECTION : Nettoyer les tokens temporaires d'abord
        cleanupTemporaryTokens();
        
        // ‚úÖ CORRECTION : R√©cup√©rer le bon token d'authentification
        const authToken = getValidAuthToken();
        if (!authToken) {
            console.log('‚ùå Aucun token d\'authentification valide disponible');
            throw new Error('Token d\'authentification manquant');
        }
        
        console.log('üîë Token d\'authentification utilis√©:', authToken.substring(0, 20) + '...');
        
        const response = await api.get(`/ProfessionnelSante/consultations`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });
        console.log('‚úÖ Consultations re√ßues:', response.data);
        
        if (response.data && response.data.consultations) {
            return response.data.consultations;
        } else if (response.data && Array.isArray(response.data)) {
            return response.data;
        }
        
        return [];
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des consultations:', error);
        
        if (error.response) {
            console.error('üîç D√©tails de l\'erreur:', {
                status: error.response.status,
                statusText: error.response.statusText,
                data: error.response.data
            });
        }
        
        return [];
    }
};

// ================================
// UTILITAIRES
// ================================

// Fonction pour d√©terminer le type d'utilisateur connect√©
export const getUserType = () => {
    console.log('üîç getUserType - D√©termination du type d\'utilisateur...');
    
    // ‚úÖ NOUVEAU : Logs d√©taill√©s de chaque v√©rification
    console.log('  - üîç V√©rification patient...');
    const isPatient = isPatientAuthenticated();
    console.log('    - R√©sultat:', isPatient ? '‚úÖ Patient authentifi√©' : '‚ùå Patient non authentifi√©');
    
    if (isPatient) {
        console.log('  - ‚úÖ Type d\'utilisateur d√©termin√©: patient');
        return 'patient';
    }
    
    console.log('  - üîç V√©rification m√©decin...');
    const isMedecin = isMedecinAuthenticated();
    console.log('    - R√©sultat:', isMedecin ? '‚úÖ M√©decin authentifi√©' : '‚ùå M√©decin non authentifi√©');
    
    if (isMedecin) {
        console.log('  - ‚úÖ Type d\'utilisateur d√©termin√©: medecin');
        return 'medecin';
    }
    
    console.log('  - üîç V√©rification authentification g√©n√©rale...');
    const isGeneralAuth = isAuthenticated();
    console.log('    - R√©sultat:', isGeneralAuth ? '‚úÖ Authentification g√©n√©rale' : '‚ùå Pas d\'authentification g√©n√©rale');
    
    if (isGeneralAuth) {
        console.log('  - ‚úÖ Type d\'utilisateur d√©termin√©: user');
        return 'user';
    }
    
    console.log('  - ‚ùå Aucun type d\'utilisateur d√©termin√©');
    return null;
};

// Fonction pour obtenir les donn√©es de l'utilisateur connect√©
export const getCurrentUser = () => {
    const userType = getUserType();
    
    switch (userType) {
        case 'patient':
            return { type: 'patient', data: getStoredPatient() };
        case 'medecin':
            return { type: 'medecin', data: getStoredMedecin() };
        default:
            return null;
    }
};

// ================================
// R√âCUP√âRATION JWT APR√àS VALIDATION 2FA
// ================================

export const getValidJWTAfter2FA = async (userType, identifier, credentials = null) => {
    try {
        console.log('üîê DEBUG - Tentative de r√©cup√©ration JWT apr√®s validation 2FA:', {
            userType,
            identifier: identifier ? `${identifier.substring(0, 20)}...` : 'N/A',
            hasCredentials: !!credentials
        });
        
        // ‚úÖ TENTATIVE 1: Utiliser le JWT original stock√© lors de la premi√®re connexion
        const originalJWT = localStorage.getItem('originalJWT');
        const firstConnectionToken = localStorage.getItem('firstConnectionToken');
        
        if (originalJWT || firstConnectionToken) {
            const validJWT = originalJWT || firstConnectionToken;
            console.log('‚úÖ JWT original trouv√© et r√©utilis√©:', validJWT.substring(0, 30) + '...');
            
            // Stocker dans la bonne cl√© selon le type d'utilisateur
            if (userType === 'patient') {
                localStorage.setItem('jwt', validJWT);
                console.log('üîê JWT patient restaur√© apr√®s 2FA');
            } else {
                localStorage.setItem('token', validJWT);
                console.log('üîê JWT professionnel restaur√© apr√®s 2FA');
            }
            
            return validJWT;
        }
        
        // ‚úÖ TENTATIVE 2: FAIRE UN VRAI APPEL DE CONNEXION AU SERVEUR
        console.log('‚ö†Ô∏è Aucun JWT original trouv√©, appel API de connexion...');
        
        let loginResponse = null;
        
        if (userType === 'patient') {
            // Appel de connexion patient
            console.log('üîê Appel de connexion patient...');
            loginResponse = await loginPatient({ numero_assure: identifier, ...credentials });
        } else {
            // Appel de connexion m√©decin
            console.log('üîê Appel de connexion m√©decin...');
            loginResponse = await loginMedecin({ numero_adeli: identifier, ...credentials });
        }
        
        console.log('üîê R√©ponse de connexion re√ßue:', loginResponse);
        
        // Extraire le JWT de la r√©ponse de connexion
        let newJWT = null;
        
        if (loginResponse.token) {
            newJWT = loginResponse.token;
        } else if (loginResponse.data && loginResponse.data.token) {
            newJWT = loginResponse.data.token;
        } else if (loginResponse.jwt) {
            newJWT = loginResponse.jwt;
        }
        
        if (newJWT) {
            console.log('‚úÖ Vrai JWT obtenu du serveur via connexion:', newJWT.substring(0, 30) + '...');
            
            // Stocker le nouveau JWT
            if (userType === 'patient') {
                localStorage.setItem('jwt', newJWT);
                localStorage.setItem('originalJWT', newJWT);
            } else {
                localStorage.setItem('token', newJWT);
                localStorage.setItem('originalJWT', newJWT);
            }
            
            return newJWT;
        }
        
        throw new Error('Aucun JWT valide obtenu de la connexion serveur');
        
    } catch (error) {
        console.error('‚ùå ERREUR lors de la r√©cup√©ration JWT apr√®s 2FA:', error);
        
        // ‚úÖ TENTATIVE 3: Essayer un refresh token en dernier recours
        console.log('‚ö†Ô∏è Tentative de refresh token en dernier recours...');
        
        try {
            let endpoint = '';
            let payload = {};
            
            if (userType === 'patient') {
                endpoint = '/patient/auth/refresh-token';
                payload = { numero_assure: identifier };
            } else {
                endpoint = '/ProfessionnelSante/auth/refresh-token';
                payload = { numero_adeli: identifier };
            }
            
            const response = await api.post(endpoint, payload);
            
            if (response.data.token || response.data.jwt) {
                const refreshJWT = response.data.token || response.data.jwt;
                console.log('‚úÖ JWT obtenu via refresh token:', refreshJWT.substring(0, 30) + '...');
                
                // Stocker le JWT de refresh
                if (userType === 'patient') {
                    localStorage.setItem('jwt', refreshJWT);
                    localStorage.setItem('originalJWT', refreshJWT);
                } else {
                    localStorage.setItem('token', refreshJWT);
                    localStorage.setItem('originalJWT', refreshJWT);
                }
                
                return refreshJWT;
            }
        } catch (refreshError) {
            console.error('‚ùå Refresh token √©galement √©chou√©:', refreshError);
        }
        
        // üö® DERNIER RECOURS : Cr√©er un JWT temporaire
        console.log('üö® Cr√©ation d\'un JWT temporaire en dernier recours...');
        
        const tempJWT = `temp_jwt_${userType}_${Date.now()}`;
        
        if (userType === 'patient') {
            localStorage.setItem('jwt', tempJWT);
        } else {
            localStorage.setItem('token', tempJWT);
        }
        
        console.log('üîê JWT temporaire cr√©√©:', tempJWT);
        return tempJWT;
    }
};

// D√©connexion universelle
export const logoutAll = async () => {
    const userType = getUserType();
    
    try {
        // Appel API de d√©connexion selon le type d'utilisateur
        switch (userType) {
            case 'patient':
                await logoutPatient();
                break;
            case 'medecin':
                await logoutMedecin();
                break;
            default:
                await logout();
                break;
        }
    } catch (error) {
        console.error("Erreur lors de la d√©connexion:", error);
    } finally {
        // ‚úÖ NOUVEAU : Nettoyage standardis√© et complet
        standardCleanup(userType);
        
        // Nettoyer aussi les tokens de premi√®re connexion lors de la d√©connexion compl√®te
        localStorage.removeItem('originalJWT');
        localStorage.removeItem('firstConnectionToken');
        
        console.log('‚úÖ D√©connexion universelle termin√©e - Nettoyage complet effectu√©');
    }
};

// Fonction pour d√©coder un token JWT
const decodeJWT = (token) => {
    try {
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        return JSON.parse(jsonPayload);
    } catch (error) {
        console.error('Erreur lors du d√©codage du JWT:', error);
        return null;
    }
};

// Fonction pour extraire les informations du m√©decin depuis le token
const extractMedecinFromToken = (token) => {
    const decoded = decodeJWT(token);
    if (decoded) {
        console.log('üîç Token d√©cod√©:', decoded);
        
        // Chercher les informations du m√©decin dans le token
        const medecinInfo = {
            id: decoded.professionnel_id || decoded.medecin_id || decoded.id,
            role: decoded.role || 'medecin',
            // Autres informations qui pourraient √™tre dans le token
            ...decoded
        };
        
        console.log('‚úÖ Informations extraites du token:', medecinInfo);
        return medecinInfo;
    }
    return null;
};

const authApi = {
    // Authentification g√©n√©rale
    login,
    register,
    logout,
    me,
    changePassword,
    isAuthenticated,
    
    // Authentification patient
    loginPatient,
    getPatientProfile,
    logoutPatient,
    getStoredPatient,
    isPatientAuthenticated,
    
    // Authentification m√©decin
    loginMedecin,
    getMedecinProfile,
    logoutMedecin,
    getStoredMedecin,
    isMedecinAuthenticated,
    changePasswordMedecin,
    fetchMedecinDetails,
    fetchPatientsList,
    fetchPatientFiles,
    fetchPatientFile,
    fetchConsultations,
    
    // Utilitaires
    getUserType,
    getCurrentUser,
    standardCleanup,
    logoutAll,
    clearAuthData,
    cleanupTemporaryTokens,
    checkAuthenticationStatus,
    
    // R√©cup√©ration JWT apr√®s 2FA
    getValidJWTAfter2FA
};

export default authApi;