import axios from "axios";

const API_URL = "http://localhost:3000/api";

const api = axios.create({
    baseURL: API_URL,
    headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
    },
});

// Intercepteur pour ajouter le token √† chaque requ√™te
api.interceptors.request.use(
    (config) => {
        // Prioriser le token JWT pour les patients
        const jwtToken = localStorage.getItem('jwt');
        const generalToken = localStorage.getItem('token');
        
        // Pour les routes m√©decin, utiliser le token g√©n√©ral
        if (config.url && config.url.includes('/ProfessionnelSante/')) {
            if (generalToken) {
                config.headers.Authorization = `Bearer ${generalToken}`;
            }
        } else if (jwtToken) {
            // Pour les autres routes, prioriser le JWT
            config.headers.Authorization = `Bearer ${jwtToken}`;
        } else if (generalToken) {
            config.headers.Authorization = `Bearer ${generalToken}`;
        }
        return config;
    },
    (error) => Promise.reject(error)
);

// Interceptor pour g√©rer les erreurs d'authentification
api.interceptors.response.use(
    (response) => response,
    (error) => {
        // On laisse la gestion du 401 au composant appelant
        return Promise.reject(error);
    }
);

// Fonction utilitaire pour nettoyer les donn√©es d'authentification
const clearAuthData = () => {
    localStorage.removeItem("jwt");
    localStorage.removeItem("token");
    localStorage.removeItem("medecin");
    localStorage.removeItem("patient");
};

// ================================
// AUTHENTIFICATION G√âN√âRALE
// ================================

export const login = async (identifiant) => {
    try {
        const response = await api.post(`/auth/login`, identifiant);
        if (response.data.token) {
            localStorage.setItem('token', response.data.token);
        }
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de connexion";
    }
};

export const register = async (user) => {
    try {
        const response = await api.post(`/auth/register`, { user });
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur d'inscription";
    }
};

export const logout = async () => {
    try {
        const response = await api.post("/auth/logout");
        localStorage.removeItem("token");
        console.log("D√©connexion r√©ussie");
        return response.data;
    } catch (error) {
        // Nettoyer m√™me en cas d'erreur
        localStorage.removeItem("token");
        throw error.response?.data?.message || "Erreur de d√©connexion";
    }
};

export const me = async () => {
    try {
        const response = await api.get(`/auth/me`);
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de r√©cup√©ration des informations de la session";
    }
};

export const changePassword = async (user) => {
    try {
        const response = await api.put(`/auth/change-password`, { user });
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de modification du mot de passe";
    }
};

export const isAuthenticated = () => {
    return !!(localStorage.getItem('token') || localStorage.getItem('jwt'));
};

// ================================
// AUTHENTIFICATION PATIENT
// ================================

export const loginPatient = async (identifiant) => {
    try {
        const response = await api.post(`/patient/auth/login`, identifiant);
        const { token, data } = response.data;
        if (token && data && data.patient) {
            localStorage.setItem("jwt", token);
            localStorage.setItem("patient", JSON.stringify(data.patient));
        }
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de connexion patient";
    }
};

export const getPatientProfile = async () => {
    try {
        const response = await api.get(`/patient/auth/me`);
        const patientProfile = response.data;
        if (patientProfile && patientProfile.data && patientProfile.data.patient) {
            localStorage.setItem("patient", JSON.stringify(patientProfile.data.patient));
            return patientProfile.data.patient;
        }
        return null;
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration du profil patient:", error);
        if (error.response?.status === 401) {
            localStorage.removeItem("jwt");
            localStorage.removeItem("patient");
        }
        throw error;
    }
};

export const logoutPatient = async () => {
    try {
        await api.post(`/patient/auth/logout`);
    } catch (error) {
        console.error("Erreur lors de la d√©connexion patient:", error);
    } finally {
        // Nettoyer les donn√©es m√™me en cas d'erreur
        localStorage.removeItem("jwt");
        localStorage.removeItem("patient");
    }
};

export const getStoredPatient = () => {
    try {
        const patient = localStorage.getItem("patient");
        return patient ? JSON.parse(patient) : null;
    } catch (error) {
        console.error('Erreur lors du parsing des donn√©es patient:', error);
        localStorage.removeItem("patient");
        return null;
    }
};

export const isPatientAuthenticated = () => {
    const token = localStorage.getItem('jwt');
    const patient = getStoredPatient();
    return !!(token && patient);
};

// ================================
// AUTHENTIFICATION PROFESSIONNEL DE SANT√â
// ================================

export const loginMedecin = async (identifiant) => {
    try {
        // Nettoyer les tokens existants pour √©viter les conflits
        localStorage.removeItem('jwt');
        
        const response = await api.post(`/ProfessionnelSante/auth/login`, identifiant);
        console.log('üîç R√©ponse compl√®te du serveur:', response.data);
        
        if (response.data.token) {
            localStorage.setItem('token', response.data.token);
        }
        
        // Stocker les donn√©es du m√©decin - analyser la structure exacte
        let medecinData = null;
        
        // Log d√©taill√© de la structure
        console.log('üìä Structure de la r√©ponse:');
        console.log('  - response.data:', response.data);
        console.log('  - response.data.data:', response.data.data);
        console.log('  - response.data.data.professionnel:', response.data.data?.professionnel);
        console.log('  - response.data.data.medecin:', response.data.data?.medecin);
        
        // Essayer diff√©rentes structures possibles
        if (response.data.medecin) {
            medecinData = response.data.medecin;
            console.log('‚úÖ Donn√©es trouv√©es dans response.data.medecin');
        } else if (response.data.professionnel) {
            medecinData = response.data.professionnel;
            console.log('‚úÖ Donn√©es trouv√©es dans response.data.professionnel');
        } else if (response.data.data && response.data.data.professionnel) {
            medecinData = response.data.data.professionnel;
            console.log('‚úÖ Donn√©es trouv√©es dans response.data.data.professionnel');
        } else if (response.data.data && response.data.data.medecin) {
            medecinData = response.data.data.medecin;
            console.log('‚úÖ Donn√©es trouv√©es dans response.data.data.medecin');
        } else if (response.data.data) {
            // Si data existe mais pas de sous-propri√©t√© sp√©cifique, utiliser data directement
            medecinData = response.data.data;
            console.log('‚úÖ Utilisation de response.data.data directement');
        }
        
        if (medecinData) {
            console.log('‚úÖ Donn√©es m√©decin extraites:', medecinData);
            
            // V√©rifier si les donn√©es contiennent les informations n√©cessaires
            if (!medecinData.nom && !medecinData.prenom) {
                console.log('‚ö†Ô∏è Donn√©es extraites mais nom/pr√©nom manquants, recherche dans la structure...');
                
                // Chercher dans les propri√©t√©s imbriqu√©es
                const allKeys = Object.keys(medecinData);
                console.log('üîç Toutes les cl√©s disponibles:', allKeys);
                
                // Essayer de trouver les informations dans d'autres propri√©t√©s
                for (const key of allKeys) {
                    const value = medecinData[key];
                    if (typeof value === 'object' && value !== null) {
                        console.log(`üîç Exploration de ${key}:`, value);
                        if (value.nom || value.prenom || value.specialite) {
                            medecinData = { ...medecinData, ...value };
                            console.log('‚úÖ Informations trouv√©es dans', key, ':', value);
                            break;
                        }
                    }
                }
            }
            
            localStorage.setItem('medecin', JSON.stringify(medecinData));
        } else {
            console.log('‚ö†Ô∏è Aucune donn√©e m√©decin trouv√©e dans la r√©ponse');
            
            // Essayer d'extraire les informations du token
            if (response.data.token) {
                const tokenInfo = extractMedecinFromToken(response.data.token);
                if (tokenInfo) {
                    console.log('‚úÖ Utilisation des informations du token');
                    localStorage.setItem('medecin', JSON.stringify(tokenInfo));
                } else {
                    // Cr√©er un objet m√©decin minimal
                    const minimalMedecin = {
                        id: response.data.data?.professionnel_id || response.data.data?.medecin_id || 'unknown',
                        nom: 'M√©decin',
                        prenom: 'Connect√©',
                        role: 'medecin',
                        specialite: 'G√©n√©raliste'
                    };
                    localStorage.setItem('medecin', JSON.stringify(minimalMedecin));
                    console.log('üì¶ M√©decin minimal cr√©√©:', minimalMedecin);
                }
            } else {
                // Cr√©er un objet m√©decin minimal
                const minimalMedecin = {
                    id: response.data.data?.professionnel_id || response.data.data?.medecin_id || 'unknown',
                    nom: 'M√©decin',
                    prenom: 'Connect√©',
                    role: 'medecin',
                    specialite: 'G√©n√©raliste'
                };
                localStorage.setItem('medecin', JSON.stringify(minimalMedecin));
                console.log('üì¶ M√©decin minimal cr√©√©:', minimalMedecin);
            }
        }
        
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de connexion m√©decin";
    }
};

export const getMedecinProfile = async () => {
    try {
        const response = await api.get(`/ProfessionnelSante/auth/me`);
        // On s'assure de la structure
        const professionnel = response.data?.data?.professionnel || response.data?.professionnel;
        if (professionnel) {
            localStorage.setItem('medecin', JSON.stringify(professionnel));
        }
        return response.data;
    } catch (error) {
        // Ne pas lancer d'erreur pour √©viter la d√©connexion automatique
        // Retourner les donn√©es stock√©es localement si disponibles
        const storedMedecin = getStoredMedecin();
        if (storedMedecin) {
            return { data: { professionnel: storedMedecin } };
        }
        throw error;
    }
};

export const logoutMedecin = async () => {
    try {
        await api.post(`/ProfessionnelSante/auth/logout`);
        console.log("‚úÖ D√©connexion m√©decin r√©ussie c√¥t√© serveur");
    } catch (error) {
        console.error("Erreur lors de la d√©connexion m√©decin:", error);
    } finally {
        // Nettoyer les donn√©es m√™me en cas d'erreur
        localStorage.removeItem("token");
        localStorage.removeItem("medecin");
        console.log("üóëÔ∏è Token et donn√©es m√©decin supprim√©s du localStorage");
    }
};

export const changePasswordMedecin = async (user) => {
    try {
        const response = await api.put(`/ProfessionnelSante/auth/change-password`, { user });
        return response.data;
    } catch (error) {
        throw error.response?.data?.message || "Erreur de modification du mot de passe";
    }
};

export const getStoredMedecin = () => {
    try {
        const medecin = localStorage.getItem("medecin");
        return medecin ? JSON.parse(medecin) : null;
    } catch (error) {
        console.error('Erreur lors du parsing des donn√©es m√©decin:', error);
        localStorage.removeItem("medecin");
        return null;
    }
};

export const isMedecinAuthenticated = () => {
    const token = localStorage.getItem('token');
    const medecin = getStoredMedecin();
    
    console.log('üîç V√©rification authentification m√©decin:');
    console.log('  - Token:', token ? '‚úÖ Pr√©sent' : '‚ùå Absent');
    console.log('  - Donn√©es m√©decin:', medecin ? '‚úÖ Pr√©sentes' : '‚ùå Absentes');
    console.log('  - Donn√©es m√©decin d√©taill√©es:', medecin);
    
    const isAuth = !!(token && medecin);
    console.log('  - R√©sultat authentification:', isAuth ? '‚úÖ Authentifi√©' : '‚ùå Non authentifi√©');
    
    return isAuth;
};

// Fonction pour r√©cup√©rer les informations compl√®tes du m√©decin
export const fetchMedecinDetails = async () => {
    try {
        console.log('üîç R√©cup√©ration des d√©tails du m√©decin...');
        const response = await api.get(`/ProfessionnelSante/profile`);
        console.log('‚úÖ D√©tails m√©decin re√ßus:', response.data);
        
        if (response.data && response.data.professionnel) {
            const medecinData = response.data.professionnel;
            localStorage.setItem('medecin', JSON.stringify(medecinData));
            console.log('‚úÖ Donn√©es m√©decin mises √† jour:', medecinData);
            return medecinData;
        }
        
        return null;
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©tails:', error);
        return null;
    }
};

// ================================
// UTILITAIRES
// ================================

// Fonction pour d√©terminer le type d'utilisateur connect√©
export const getUserType = () => {
    if (isPatientAuthenticated()) return 'patient';
    if (isMedecinAuthenticated()) return 'medecin';
    if (isAuthenticated()) return 'user';
    return null;
};

// Fonction pour obtenir les donn√©es de l'utilisateur connect√©
export const getCurrentUser = () => {
    const userType = getUserType();
    
    switch (userType) {
        case 'patient':
            return { type: 'patient', data: getStoredPatient() };
        case 'medecin':
            return { type: 'medecin', data: getStoredMedecin() };
        default:
            return null;
    }
};

// D√©connexion universelle
export const logoutAll = async () => {
    const userType = getUserType();
    
    try {
        switch (userType) {
            case 'patient':
                await logoutPatient();
                break;
            case 'medecin':
                await logoutMedecin();
                break;
            default:
                await logout();
                break;
        }
    } catch (error) {
        console.error("Erreur lors de la d√©connexion:", error);
    } finally {
        clearAuthData();
    }
};

// Fonction pour d√©coder un token JWT
const decodeJWT = (token) => {
    try {
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        return JSON.parse(jsonPayload);
    } catch (error) {
        console.error('Erreur lors du d√©codage du JWT:', error);
        return null;
    }
};

// Fonction pour extraire les informations du m√©decin depuis le token
const extractMedecinFromToken = (token) => {
    const decoded = decodeJWT(token);
    if (decoded) {
        console.log('üîç Token d√©cod√©:', decoded);
        
        // Chercher les informations du m√©decin dans le token
        const medecinInfo = {
            id: decoded.professionnel_id || decoded.medecin_id || decoded.id,
            role: decoded.role || 'medecin',
            // Autres informations qui pourraient √™tre dans le token
            ...decoded
        };
        
        console.log('‚úÖ Informations extraites du token:', medecinInfo);
        return medecinInfo;
    }
    return null;
};

const authApi = {
    // Authentification g√©n√©rale
    login,
    register,
    logout,
    me,
    changePassword,
    isAuthenticated,
    
    // Authentification patient
    loginPatient,
    getPatientProfile,
    logoutPatient,
    getStoredPatient,
    isPatientAuthenticated,
    
    // Authentification m√©decin
    loginMedecin,
    getMedecinProfile,
    logoutMedecin,
    getStoredMedecin,
    isMedecinAuthenticated,
    changePasswordMedecin,
    fetchMedecinDetails,
    
    // Utilitaires
    getUserType,
    getCurrentUser,
    logoutAll,
    clearAuthData
};

export default authApi;