import axios from "axios";

const API_URL = "http://localhost:3000/api";

// Fonction utilitaire pour r√©cup√©rer le patient connect√©
const getStoredPatient = () => {
    try {
        const patient = localStorage.getItem("patient");
        return patient ? JSON.parse(patient) : null;
    } catch (error) {
        console.error('Erreur lors du parsing des donn√©es patient:', error);
        return null;
    }
};

const dmpApi = axios.create({
    baseURL: API_URL,
    headers: { "Content-Type": "application/json", "Accept": "application/json" },
} );

// Intercepteur pour le token JWT
dmpApi.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('jwt') || localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
    },
    (error) => Promise.reject(error)
);

// =================================================================
//                 API POUR LES PATIENTS
// =================================================================
export const getPendingAccessRequests = () => dmpApi.get('/access/patient/pending');
export const respondToAccessRequest = (id, decision, comment) => dmpApi.patch(`/access/patient/response/${id}`, { response: decision, comment });
export const getPatientAuthorizations = () => dmpApi.get('/access/patient/authorizations');
export const getPatientAccessHistory = () => dmpApi.get('/access/patient/history');

// =================================================================
//                 API POUR LES M√âDECINS
// =================================================================

// --- Authentification et Demande d'Acc√®s ---
export const authenticateCPS = (cpsData) => dmpApi.post('/auth/authenticate-cps', cpsData);
export const requestStandardAccess = (accessData) => dmpApi.post('/access/request-standard', accessData);

/**
 * (M√©decin) R√©cup√®re le statut d'acc√®s actuel pour un patient donn√©.
 * @param {number} patientId L'ID du patient.
 * @returns {Promise<{accessStatus: string, authorization: object|null}>}
 */
export const getAccessStatus = async (patientId) => {
    try {
        if (patientId && patientId !== 'undefined') {
            // Pour les m√©decins : v√©rifier le statut d'acc√®s √† un patient sp√©cifique
            const response = await dmpApi.get(`/access/status/${patientId}`);
            return {
                accessStatus: response.data.data.status,
                authorization: null // Le statut est d√©j√† filtr√© c√¥t√© backend
            };
        } else {
            // Pour les patients : r√©cup√©rer leur propre statut d'acc√®s
            const response = await dmpApi.get('/access/patient/status');
            const data = response.data.data;
            
            // Retourner une structure coh√©rente
            return {
                accessStatus: data.activeAuthorizations.length > 0 ? 'active' : 'no_access',
                authorization: data.activeAuthorizations[0] || null,
                // Informations suppl√©mentaires disponibles
                summary: data.summary,
                allRequests: data.allRequests
            };
        }
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration du statut d\'acc√®s:', error);
        throw error;
    }
};

/**
 * Fonction pour filtrer les acc√®s par patient ID (si n√©cessaire c√¥t√© frontend)
 * Note: Cette fonction peut √™tre redondante car le backend filtre d√©j√† les donn√©es
 */
const filterAccessByPatient = (accessData, patientId) => {
    if (!accessData || !patientId) return [];
    
    // V√©rifier la structure des donn√©es
    let arr;
    if (Array.isArray(accessData)) {
        arr = accessData;
    } else if (accessData.authorizationAccess && Array.isArray(accessData.authorizationAccess)) {
        arr = accessData.authorizationAccess;
    } else if (accessData.allRequests && Array.isArray(accessData.allRequests)) {
        arr = accessData.allRequests;
    } else {
        console.warn('Structure de donn√©es inattendue:', accessData);
        return [];
    }
    
    console.log("Acc√®s bruts:", arr);
    arr.forEach(acc => console.log("Cl√©s acc√®s:", Object.keys(acc), acc));
    
    // Filtrage par patient_id avec conversion en nombre
    return arr.filter(access => {
        const accessPatientId = Number(access.patient_id);
        const targetPatientId = Number(patientId);
        return accessPatientId === targetPatientId;
    });
};

// Fonction pour r√©cup√©rer les informations de base d'un patient
export const getPatientInfo = async (patientId) => {
    try {
        console.log(`üîç R√©cup√©ration des informations du patient ${patientId}...`);
        
        // Validation de l'ID du patient
        if (!patientId || isNaN(patientId) || patientId <= 0) {
            console.warn(`‚ö†Ô∏è ID patient invalide: ${patientId}`);
            return {
                id: patientId,
                nom: 'Patient',
                prenom: 'Inconnu',
                date_naissance: 'N/A',
                groupe_sanguin: 'N/A'
            };
        }
        
        // Essayer d'abord la fonction getPatient de patientApi
        try {
            const { getPatient } = await import('./patientApi.js');
            const patientData = await getPatient(patientId);
            console.log(`‚úÖ Informations patient r√©cup√©r√©es via getPatient:`, patientData);
            
            // Extraire les donn√©es du patient de la r√©ponse
            if (patientData?.data?.patient) {
                return patientData.data.patient;
            } else if (patientData?.patient) {
                return patientData.patient;
            } else if (patientData?.data) {
                return patientData.data;
            } else {
                return patientData;
            }
        } catch (patientError) {
            console.log(`‚ö†Ô∏è getPatient non disponible, essai via route directe...`);
        }
        
        // Essayer la route patient directe
        try {
            const response = await dmpApi.get(`/patient/${patientId}`);
            console.log(`‚úÖ Informations patient r√©cup√©r√©es via /patient/${patientId}:`, response.data);
            
            if (response.data?.data?.patient) {
                return response.data.data.patient;
            } else if (response.data?.patient) {
                return response.data.patient;
            } else if (response.data?.data) {
                return response.data.data;
            } else {
                return response.data;
            }
        } catch (patientError) {
            console.log(`‚ö†Ô∏è Route /patient/${patientId} non disponible, essai via dossier m√©dical...`);
        }
        
        // Fallback via le dossier m√©dical
        try {
            const dossierResponse = await dmpApi.get(`/dossierMedical/patient/${patientId}/complet`);
            const dossierData = dossierResponse.data.data || dossierResponse.data;
            console.log(`üìã Donn√©es du dossier r√©cup√©r√©es:`, dossierData);
            
            // Extraire les informations du patient du dossier
            if (dossierData?.patient) {
                console.log(`‚úÖ Informations patient extraites du dossier:`, dossierData.patient);
                return dossierData.patient;
            } else if (dossierData?.patient_info) {
                console.log(`‚úÖ Informations patient extraites du dossier (patient_info):`, dossierData.patient_info);
                return dossierData.patient_info;
            } else if (dossierData?.nom || dossierData?.prenom) {
                // Cr√©er un objet patient avec les donn√©es disponibles dans le dossier
                const patientInfo = {
                    id: patientId,
                    nom: dossierData.nom || 'Patient',
                    prenom: dossierData.prenom || 'Inconnu',
                    date_naissance: dossierData.date_naissance || 'N/A',
                    groupe_sanguin: dossierData.groupe_sanguin || 'N/A'
                };
                console.log(`‚ö†Ô∏è Informations patient extraites des propri√©t√©s du dossier:`, patientInfo);
                return patientInfo;
            } else {
                console.warn(`‚ö†Ô∏è Aucune information patient trouv√©e dans le dossier`);
                console.log(`üîç Cl√©s disponibles dans le dossier:`, Object.keys(dossierData || {}));
            }
        } catch (dossierError) {
            console.log(`‚ö†Ô∏è Route dossier m√©dical non disponible:`, dossierError.message);
        }
        
        // Dernier fallback : essayer de r√©cup√©rer depuis la liste des patients
        try {
            const { getPatients } = await import('./patientApi.js');
            const patientsResponse = await getPatients();
            console.log(`üîç Recherche du patient ${patientId} dans la liste des patients...`);
            
            if (patientsResponse?.data) {
                const patients = Array.isArray(patientsResponse.data) ? patientsResponse.data : [patientsResponse.data];
                const patient = patients.find(p => p.id == patientId || p.id_patient == patientId);
                
                if (patient) {
                    console.log(`‚úÖ Patient trouv√© dans la liste:`, patient);
                    return patient;
                }
            }
        } catch (listError) {
            console.log(`‚ö†Ô∏è Impossible de r√©cup√©rer la liste des patients:`, listError.message);
        }
        
        // Si aucune m√©thode n'a fonctionn√©, cr√©er un objet patient minimal
        console.warn(`‚ö†Ô∏è Aucune m√©thode n'a permis de r√©cup√©rer les informations du patient ${patientId}`);
        const fallbackPatient = {
            id: patientId,
            nom: 'Patient',
            prenom: 'Inconnu',
            date_naissance: 'N/A',
            groupe_sanguin: 'N/A'
        };
        console.log(`‚ö†Ô∏è Objet patient minimal cr√©√©:`, fallbackPatient);
        return fallbackPatient;
        
    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration des informations du patient ${patientId}:`, error);
        // Retourner un objet patient minimal en cas d'erreur
        return {
            id: patientId,
            nom: 'Patient',
            prenom: 'Inconnu',
            date_naissance: 'N/A',
            groupe_sanguin: 'N/A'
        };
    }
};

/**
 * (M√©decin) R√©cup√®re l'ensemble des donn√©es du dossier d'un patient de mani√®re s√©curis√©e.
 * Ne fonctionne que si une autorisation est active.
 * @param {number} patientId
 * @returns {Promise<object>} Un objet contenant toutes les donn√©es du dossier.
 */
export const getSecureDossierForMedecin = async (patientId) => {
    try {
        console.log(`üîç R√©cup√©ration du dossier s√©curis√© pour le patient ${patientId}...`);
        
        const response = await dmpApi.get(`/dossierMedical/patient/${patientId}/complet`);
        console.log(`üìä R√©ponse brute de l'API:`, response.data);
        
        // Extraire les donn√©es du dossier
        const dossierData = response.data.data || response.data;
        console.log(`üìã Donn√©es du dossier extraites:`, dossierData);
        
        // S'assurer que nous avons les informations du patient
        if (dossierData && dossierData.patient) {
            console.log(`‚úÖ Informations du patient trouv√©es:`, dossierData.patient);
        } else if (dossierData && dossierData.patient_info) {
            console.log(`‚úÖ Informations du patient trouv√©es (patient_info):`, dossierData.patient_info);
            // Normaliser la structure
            dossierData.patient = dossierData.patient_info;
        } else {
            console.warn(`‚ö†Ô∏è Aucune information patient trouv√©e dans le dossier`);
            console.log(`üîç Cl√©s disponibles dans le dossier:`, Object.keys(dossierData || {}));
        }
        
        // S'assurer que nous avons les documents
        if (dossierData && dossierData.documents) {
            console.log(`üìÑ ${dossierData.documents.length} documents trouv√©s`);
        } else {
            console.warn(`‚ö†Ô∏è Aucun document trouv√© dans le dossier`);
        }
        
        // S'assurer que nous avons les auto-mesures
        if (dossierData && dossierData.autoMesures) {
            console.log(`üìä ${dossierData.autoMesures.length} auto-mesures trouv√©es`);
        } else if (dossierData && dossierData.auto_mesures) {
            console.log(`üìä ${dossierData.auto_mesures.length} auto-mesures trouv√©es (auto_mesures)`);
            // Normaliser la structure
            dossierData.autoMesures = dossierData.auto_mesures;
        } else {
            console.warn(`‚ö†Ô∏è Aucune auto-mesure trouv√©e dans le dossier`);
        }
        
        console.log(`‚úÖ Dossier s√©curis√© r√©cup√©r√© avec succ√®s pour le patient ${patientId}`);
        return dossierData;
        
    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration du dossier s√©curis√© pour le patient ${patientId}:`, error);
        throw error;
    }
};

// --- Gestion des demandes envoy√©es (pour la page DMPDemandesAcces) ---
export const getSentAccessRequests = async () => {
    const response = await dmpApi.get('/access/authorizations/active');
    return response.data.data.authorizations;
};

// --- Gestion des demandes d'acc√®s pour les m√©decins ---
export const getMedecinAccessRequests = async (patientId) => {
    try {
        // Utiliser la nouvelle route pour les patients
        const response = await dmpApi.get('/access/patient/status');
        const {data} = response.data.data;
        
        // Si nous avons un patientId sp√©cifique, filtrer les r√©sultats
        if (patientId && data && data.authorizationAccess) {
            const filteredAccess = data.authorizationAccess.filter(access => 
                access.patient_id === parseInt(patientId)
            );
            
            // Retourner la structure filtr√©e
            return {
                ...data,
                authorizationAccess: filteredAccess,
                total: filteredAccess.length
            };
        }
        
        return data;
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des acc√®s:', error);
        // En cas d'erreur, retourner un tableau vide
        return { authorizationAccess: [], total: 0 };
    }
};

// --- Gestion des demandes d'acc√®s envoy√©es par le patient ---
export const getPatientSentAccessRequests = async (patientId) => {
    try {
        // R√©cup√©rer toutes les demandes d'acc√®s
        const response = await dmpApi.get('/access/authorization');
        const allRequests = response.data.data;
        
        // Filtrer pour ne retourner que celles envoy√©es par le patient connect√©
        if (Array.isArray(allRequests)) {
            return allRequests.filter(request => 
                request.patient_id === parseInt(patientId)
            );
        }
        
        return [];
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des demandes envoy√©es:', error);
        return [];
    }
};

// --- R√©cup√©ration des acc√®s d'un patient sp√©cifique ---
export const getPatientAccessStatus = async (patientId) => {
    try {
        // Utiliser la route sp√©cifique au patient si disponible
        const response = await dmpApi.get(`/access/patient/status/${patientId}`);
        return response.data.data;
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration du statut d\'acc√®s du patient:', error);
        // Fallback vers la route g√©n√©rale
        try {
            const generalResponse = await dmpApi.get('/access/patient/status');
            const {data} = generalResponse.data.data;
            
            // Filtrer pour le patient sp√©cifique
            if (data && data.authorizationAccess) {
                const patientAccess = data.authorizationAccess.filter(access => 
                    access.patient_id === parseInt(patientId)
                );
                
                return {
                    ...data,
                    authorizationAccess: patientAccess,
                    total: patientAccess.length
                };
            }
            
            return data;
        } catch (fallbackError) {
            console.error('Erreur lors du fallback:', fallbackError);
            return { authorizationAccess: [], total: 0 };
        }
    }
};

//---- Gestion des demande d'acces pour le medecin ----


// =================================================================
//                 FONCTIONS MANQUANTES POUR LES COMPOSANTS
// =================================================================

// --- Gestion des autorisations ---
export const getAutorisations = async (patientId = null) => {
    const url = patientId ? `/access/authorization/patient/${patientId}` : '/access/authorization';
    const response = await dmpApi.get(url);
    return response.data.data;
};

export const accepterAutorisation = async (autorisationId, commentaire) => {
    const response = await dmpApi.patch(`/access/authorization/${autorisationId}`, {
        statut: 'actif',
        commentaire: commentaire || 'Autorisation accept√©e par le patient'
    });
    return response.data.data;
};

export const refuserAutorisation = async (autorisationId, raisonRefus) => {
    const response = await dmpApi.patch(`/access/authorization/${autorisationId}`, { 
        statut: 'refuse', 
        raisonRefus 
    });
    return response.data.data;
};

// Fonction export√©e pour r√©voquer une autorisation (utilise la route patient par d√©faut)
export const revokerAutorisation = async (autorisationId, raisonRevocation) => {
    try {
        // Utiliser la route patient pour la r√©vocation
        const response = await dmpApi.delete(`/access/patient/authorization/${autorisationId}`, {
            data: { reason: raisonRevocation }
        });
        return response.data;
    } catch (error) {
        console.error('Erreur lors de la r√©vocation de l\'autorisation:', error);
        throw error;
    }
};

// Fonction pour r√©voquer l'acc√®s d'un m√©decin √† un patient sp√©cifique
export const revokerAutorisationMedecin = async (professionnelId, patientId,raisonRevocation) => {
    try {
        console.log(`   D√©sactivation de l'acc√®s: M√©decin ${professionnelId} ‚Üí Patient ${patientId}`);
        
        // ‚úÖ √âTAPE 1: R√©cup√©rer l'autorisation active
        const verification = await dmpApi.get(`/access/status/${patientId}?professionnelId=${professionnelId}`);
        
        if (!verification.data.data.status || verification.data.data.status === 'not_requested') {
            console.log('‚ÑπÔ∏è Aucune autorisation active trouv√©e');
            return { message: 'Aucune autorisation active' };
        }
        
        // ‚úÖ √âTAPE 2: R√©cup√©rer l'ID de l'autorisation
        const autorisationId = verification.data.data.authorization?.id_acces;
        if (!autorisationId) {
            throw new Error('ID d\'autorisation non trouv√©');
        }
        
        // ‚úÖ √âTAPE 3: D√©sactiver l'autorisation
        const response = await dmpApi.patch(`/access/authorization/${autorisationId}`, {
            statut: 'expire',
            raison_demande: raisonRevocation
        }, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwt')}`
            }
        });

        console.log('‚úÖ Autorisation d√©sactiv√©e avec succ√®s:', response.data);
        return response.data;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la d√©sactivation de l\'autorisation:', error);
        throw error;
    }
};

// // Pour les professionnels (route existante) - si besoin futur
// const revokeProfAuth = async (id, reason) => {
//     const response = await dmpApi.delete(`/access/authorization/${id}`, {
//         data: { reason }
//     });
//     return response.data;
// };
// --- Notifications et statistiques ---
// Note: Ces endpoints n'existent pas dans l'API, on utilise les endpoints d'acc√®s √† la place
export const getNotificationsStats = async () => {
    // Utiliser l'historique des acc√®s comme alternative
    const response = await dmpApi.get('/access/history/professional');
    return response.data.data;
};

export const marquerToutesNotificationsLues = async () => {
    // Cette fonctionnalit√© n'existe pas dans l'API
    console.warn('‚ö†Ô∏è Fonctionnalit√© non disponible dans l\'API');
    return { success: true };
};

export const marquerNotificationDroitsAccesLue = async (notificationId) => {
    // Marquer la notification comme trait√©e via l'API d'autorisation
    const response = await dmpApi.patch(`/access/authorization/${notificationId}`, { 
        statut: 'traite' 
    });
    return response.data.data;
};

// --- Historique et acc√®s ---
export const getDMPAccessHistory = async (patientId) => {
    // Validation du patientId
    if (!patientId) {
        throw new Error('ID du patient requis pour r√©cup√©rer l\'historique DMP');
    }
    
    try {
        const response = await dmpApi.get(`/access/history/patient/${patientId}`);
        return response.data.data;
    } catch (error) {
        console.error(`Erreur lors de la r√©cup√©ration de l'historique DMP pour le patient ${patientId}:`, error);
        throw error;
    }
};

// --- Documents DMP ---
export const getDocumentsDMP = async (patientId = null, filters = {}) => {
    const url = patientId ? `/dossierMedical/patient/${patientId}/complet` : '/dossierMedical';
    const response = await dmpApi.get(url, { params: filters });
    return response.data.data;
};

// --- Documents personnels DMP ---
export const getDocumentsPersonnelsDMP = async (patientId = null, filters = {}) => {
    try {
        // Construire les param√®tres de requ√™te
        const params = new URLSearchParams();
        
        if (filters.type) params.append('type', filters.type);
        if (filters.date_debut) params.append('date_debut', filters.date_debut);
        if (filters.date_fin) params.append('date_fin', filters.date_fin);
        
        const queryString = params.toString();
        const url = `/documents/patient${queryString ? `?${queryString}` : ''}`;
        
        const response = await dmpApi.get(url);
        
        // V√©rifier que la r√©ponse est valide et extraire les donn√©es
        if (response.data && response.data.success) {
            console.log(`‚úÖ ${response.data.count || 0} documents personnels r√©cup√©r√©s avec succ√®s`);
            return response.data.data;
        } else {
            throw new Error('Format de r√©ponse invalide de l\'API');
        }
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des documents personnels:', error);
        // En cas d'erreur, essayer de r√©cup√©rer depuis le dossier m√©dical
        try {
            console.log('üîÑ Fallback: r√©cup√©ration depuis le dossier m√©dical...');
            const fallbackResponse = await dmpApi.get(`/dossierMedical/patient/${patientId}/complet`);
            const dossier = fallbackResponse.data.data;
            
            // Extraire les documents personnels du dossier m√©dical
            let documents = [];
            if (dossier && dossier.documents_personnels && Array.isArray(dossier.documents_personnels)) {
                documents = dossier.documents_personnels;
            } else if (dossier && dossier.documents && Array.isArray(dossier.documents)) {
                documents = dossier.documents;
            }
            
            // Appliquer les filtres si n√©cessaire
            if (filters.type) {
                documents = documents.filter(doc => doc.type === filters.type);
            }
            if (filters.date_debut) {
                documents = documents.filter(doc => new Date(doc.createdAt) >= new Date(filters.date_debut));
            }
            if (filters.date_fin) {
                documents = documents.filter(doc => new Date(doc.createdAt) <= new Date(filters.date_fin));
            }
            
            console.log(`‚úÖ ${documents.length} documents r√©cup√©r√©s via fallback`);
            return documents;
        } catch (fallbackError) {
            console.error('‚ùå Erreur lors du fallback:', fallbackError);
            return [];
        }
    }
};

export const uploadDocumentDMP = async (patientId, documentData) => {
    // Utiliser l'endpoint de mise √† jour du dossier m√©dical
    const response = await dmpApi.put(`/dossierMedical/${patientId}`, documentData);
    return response.data.data;
};

// --- Auto-mesures DMP ---
// Utiliser les nouveaux endpoints auto-mesures d√©di√©s
export const getAutoMesuresDMP = async (patientId = null, type = null) => {
    console.log('üîç getAutoMesuresDMP - FONCTION APPEL√âE avec patientId:', patientId, 'et type:', type);
    
    let url;
    if (patientId) {
        // ‚úÖ Utiliser le nouvel endpoint auto-mesures d√©di√©
        url = `/patient/${patientId}/auto-mesures`;
    } else {
        // ‚úÖ R√©cup√©rer toutes les auto-mesures
        url = '/patient/auto-mesures';
    }
    
    console.log('üîç getAutoMesuresDMP - URL appel√©e:', url);
    
    const response = await dmpApi.get(url);
    console.log('üîç getAutoMesuresDMP - R√©ponse compl√®te de l\'API:', response);
    
    // Les auto-mesures sont maintenant directement dans la r√©ponse
    let autoMesures = response.data.data || response.data || [];
    console.log('üîç getAutoMesuresDMP - Auto-mesures trouv√©es:', autoMesures);
    
    if (type) {
        autoMesures = autoMesures.filter(mesure => 
            mesure.type_mesure === type || 
            mesure.type === type
        );
        console.log('üîç getAutoMesuresDMP - Auto-mesures filtr√©es par type:', type, autoMesures);
    }
    
    const result = { data: autoMesures };
    console.log('üîç getAutoMesuresDMP - R√©sultat final:', result);
    return result;
};

// --- Nouvelles Fonctionnalit√©s Disponibles ---

// Cr√©er une nouvelle auto-mesure
export const createAutoMesureDMP = async (autoMesureData) => {
    const url = '/patient/auto-mesures';
    console.log('üîç createAutoMesureDMP - Cr√©ation auto-mesure:', autoMesureData);
    
    const response = await dmpApi.post(url, autoMesureData);
    console.log('üîç createAutoMesureDMP - R√©ponse:', response);
    
    return response.data;
};

// R√©cup√©rer une auto-mesure sp√©cifique par ID
export const getAutoMesureByIdDMP = async (autoMesureId) => {
    const url = `/patient/auto-mesures/${autoMesureId}`;
    console.log('ÔøΩÔøΩ getAutoMesureByIdDMP - R√©cup√©ration ID:', autoMesureId);
    
    const response = await dmpApi.get(url);
    console.log('ÔøΩÔøΩ getAutoMesureByIdDMP - R√©ponse:', response);
    
    return response.data;
};

// Mettre √† jour une auto-mesure
export const updateAutoMesureDMP = async (autoMesureId, updateData) => {
    const url = `/patient/auto-mesures/${autoMesureId}`;
    console.log('üîç updateAutoMesureDMP - Mise √† jour ID:', autoMesureId, updateData);
    
    const response = await dmpApi.put(url, updateData);
    console.log('üîç updateAutoMesureDMP - R√©ponse:', response);
    
    return response.data;
};

// Supprimer une auto-mesure
export const deleteAutoMesureDMP = async (autoMesureId) => {
    const url = `/patient/auto-mesures/${autoMesureId}`;
    console.log('üîç deleteAutoMesureDMP - Suppression ID:', autoMesureId);
    
    const response = await dmpApi.delete(url);
    console.log('üîç deleteAutoMesureDMP - R√©ponse:', response);
    
    return response.data;
};

// Obtenir les statistiques des auto-mesures
export const getAutoMesuresStatsDMP = async (patientId, type = null) => {
    // ‚úÖ Utiliser l'endpoint d√©di√© aux statistiques
    let url = `/patient/${patientId}/auto-mesures/stats`;
    if (type) {
        url += `?type_mesure=${type}`;
    }
    
    console.log('üîç getAutoMesuresStatsDMP - Statistiques:', patientId, type);
    
    const response = await dmpApi.get(url);
    console.log('üîç getAutoMesuresStatsDMP - R√©ponse:', response);
    
    return response.data;
};

// Obtenir la derni√®re auto-mesure par type
export const getLastAutoMesureByTypeDMP = async (patientId, type) => {
    // ‚úÖ Utiliser l'endpoint d√©di√© √† la derni√®re mesure
    const url = `/patient/${patientId}/auto-mesures/last/${type}`;
    console.log('üîç getLastAutoMesureByTypeDMP - Derni√®re mesure:', patientId, type);
    
    const response = await dmpApi.get(url);
    console.log('üîç getLastAutoMesureByTypeDMP - R√©ponse:', response);
    
    return response.data;
};

// --- DMP principal ---
export const getDMP = async (patientId = null) => {
    const url = patientId ? `/dossierMedical/patient/${patientId}/complet` : '/dossierMedical';
    const response = await dmpApi.get(url);
    return response.data.data;
};

export const updateDMP = async (patientId, dmpData) => {
    const response = await dmpApi.put(`/dossierMedical/${patientId}`, dmpData);
    return response.data.data;
};

// --- Historique m√©dical ---
// Note: L'historique fait partie du dossier m√©dical
export const getHistoriqueMedical = async (patientId = null) => {
    const url = patientId ? `/dossierMedical/patient/${patientId}/complet` : '/dossierMedical';
    const response = await dmpApi.get(url);
    // Extraire l'historique du dossier m√©dical
    const dossier = response.data.data;
    return { data: dossier?.historique || dossier?.historiqueMedical || [] };
};

export const addHistoriqueEntry = async (patientId, entry) => {
    // Ajouter l'entr√©e √† l'historique du dossier m√©dical
    const response = await dmpApi.put(`/dossierMedical/${patientId}`, { 
        historique: [entry] 
    });
    return response.data.data;
};

// --- Journal d'activit√© ---
// Note: Le journal fait partie du dossier m√©dical
export const getJournalActivite = async (patientId, filters = {}) => {
    const url = patientId ? `/dossierMedical/patient/${patientId}/complet` : '/dossierMedical';
    const response = await dmpApi.get(url);
    // Extraire le journal du dossier m√©dical
    const dossier = response.data.data;
    let journal = dossier?.journal || dossier?.journalActivite || [];
    
    // Appliquer les filtres si n√©cessaire
    if (filters.date) {
        journal = journal.filter(entry => entry.date === filters.date);
    }
    
    return { data: journal };
};

// --- Droits d'acc√®s ---
export const getDroitsAcces = async (patientId) => {
    const response = await dmpApi.get(`/access/authorization/patient/${patientId}`);
    return response.data.data;
};

export const updateDroitsAcces = async (patientId, droits) => {
    // Mettre √† jour les droits d'acc√®s via l'API d'autorisation
    const response = await dmpApi.put(`/access/authorization/patient/${patientId}`, droits);
    return response.data.data;
};

// --- Biblioth√®que sant√© ---
// Note: La biblioth√®que fait partie du dossier m√©dical
export const getBibliothequeSante = async (patientId) => {
    const url = patientId ? `/dossierMedical/patient/${patientId}/complet` : '/dossierMedical';
    const response = await dmpApi.get(url);
    // Extraire la biblioth√®que du dossier m√©dical
    const dossier = response.data.data;
    return { data: dossier?.bibliotheque || dossier?.bibliothequeSante || [] };
};

// --- Statistiques DMP ---
// Note: Les statistiques sont calcul√©es √† partir du dossier m√©dical
export const getStatistiquesDMP = async (patientId, periode = null) => {
    const url = patientId ? `/dossierMedical/patient/${patientId}/complet` : '/dossierMedical';
    const response = await dmpApi.get(url);
    // Extraire les donn√©es du dossier m√©dical pour calculer les statistiques
    const dossier = response.data.data;
    
    // Calculer les statistiques basiques √† partir des donn√©es disponibles
    const stats = {
        totalDocuments: dossier?.documents?.length || 0,
        totalAutoMesures: dossier?.autoMesures?.length || dossier?.auto_mesures?.length || 0,
        totalConsultations: dossier?.consultations?.length || 0,
        derniereMiseAJour: dossier?.derniereMiseAJour || new Date().toISOString()
    };
    
    return { data: stats };
};

// --- Rendez-vous DMP ---
export const getRendezVousDMP = async (patientId) => {
    const response = await dmpApi.get(`/rendez-vous/patient/${patientId}/avenir`);
    return response.data.data;
};

export const createRendezVousDMP = async (patientId, rdvData) => {
    const response = await dmpApi.post(`/rendez-vous`, { ...rdvData, patient_id: patientId });
    return response.data.data;
};

// --- Tableau de bord ---
// Note: Le tableau de bord est construit √† partir du dossier m√©dical
export const getTableauDeBord = async () => {
    // R√©cup√©rer le patient connect√© depuis le localStorage
    const storedPatient = getStoredPatient();
    const patientId = storedPatient?.id_patient || storedPatient?.id;
    
    if (!patientId) {
        throw new Error('ID patient non disponible pour le tableau de bord');
    }
    
    const url = `/dossierMedical/patient/${patientId}/complet`;
    const response = await dmpApi.get(url);
    const dossier = response.data.data;
    
    // Construire le tableau de bord √† partir des donn√©es du dossier
    const tableauDeBord = {
        resume: dossier?.resume || {},
        derniereConsultation: dossier?.consultations?.[0] || null,
        prochainRendezVous: null, // √Ä r√©cup√©rer via l'API rendez-vous
        documentsRecents: dossier?.documents?.slice(0, 5) || [],
        autoMesuresRecentes: dossier?.autoMesures?.slice(0, 3) || dossier?.auto_mesures?.slice(0, 3) || []
    };
    
    return { data: { tableau_de_bord: tableauDeBord } };
};

// --- Rappels ---
export const getRappels = async () => {
    // R√©cup√©rer le patient connect√© depuis le localStorage
    const storedPatient = getStoredPatient();
    const patientId = storedPatient?.id_patient || storedPatient?.id;
    
    if (!patientId) {
        throw new Error('ID patient non disponible pour les rappels');
    }
    
    const response = await dmpApi.get(`/rendez-vous/patient/${patientId}/rappels`);
    return response.data.data;
};

// --- Fonctions utilitaires pour les notifications ---
// Note: Ces endpoints n'existent pas dans l'API, on utilise les endpoints d'acc√®s √† la place
export const findAutorisationIdFromNotification = async (notification) => {
    // Utiliser l'API d'autorisation pour trouver l'autorisation correspondante
    const response = await dmpApi.get(`/access/authorization/${notification.autorisationId || notification.id}`);
    return { data: { autorisationId: response.data.data.id } };
};

export const verifierAutorisationExistence = async (notificationId) => {
    // V√©rifier l'existence de l'autorisation via l'API d'autorisation
    const response = await dmpApi.get(`/access/authorization/${notificationId}`);
    return { data: { autorisation: response.data.data } };
};

// --- Fonctions pour DMPDemandesAcces ---
export const getAutorisationsDemandees = async () => {
    const response = await dmpApi.get('/access/authorizations/active');
    return response.data.data;
};

export const verifierAcces = async (patientId) => {
    // R√©cup√©rer le professionnel connect√© depuis le localStorage
    const storedMedecin = JSON.parse(localStorage.getItem('medecin') || '{}');
    const professionnelId = storedMedecin?.id || storedMedecin?.id_professionnel;
    
    if (!professionnelId) {
        throw new Error('ID professionnel non disponible pour v√©rifier l\'acc√®s');
    }
    
    // Utiliser l'endpoint de v√©rification d'acc√®s
    const response = await dmpApi.get(`/access/check/${professionnelId}/${patientId}/standard`);
    return response.data.data;
};

// Fonction pour v√©rifier si un m√©decin a encore acc√®s √† un patient
export const verifierAccesMedecinPatient = async (professionnelId, patientId) => {
    try {
        const response = await dmpApi.get(`/access/check/${professionnelId}/${patientId}/status`);
        return {
            hasAccess: response.data.data?.hasAccess || false,
            status: response.data.data?.status || 'unknown',
            message: response.data.data?.message || 'Statut d\'acc√®s non disponible'
        };
    } catch (error) {
        console.error('Erreur lors de la v√©rification de l\'acc√®s:', error);
        return {
            hasAccess: false,
            status: 'error',
            message: 'Erreur lors de la v√©rification de l\'acc√®s'
        };
    }
};

export const getDureeRestante = async (autorisationId) => {
    const response = await dmpApi.get(`/access/authorization/${autorisationId}`);
    // Calculer la dur√©e restante √† partir de la date d'expiration
    const autorisation = response.data.data;
    if (autorisation.dateExpiration) {
        const maintenant = new Date();
        const expiration = new Date(autorisation.dateExpiration);
        const dureeRestante = expiration - maintenant;
        return { data: { dureeRestante: Math.max(0, dureeRestante) } };
    }
    return { data: { dureeRestante: 0 } };
};

// Exporter toutes les fonctions pour une utilisation facile
const dmpApiExports = {
    getPendingAccessRequests,
    respondToAccessRequest,
    getPatientAuthorizations,
    getPatientAccessHistory,
    authenticateCPS,
    requestStandardAccess,
    getAccessStatus,
    getSecureDossierForMedecin,
    getSentAccessRequests,
    getMedecinAccessRequests,
    getPatientSentAccessRequests,
    getPatientAccessStatus,
    getPatientInfo, // Ajout de la nouvelle fonction
    getAutorisations,
    accepterAutorisation,
    refuserAutorisation,
    revokerAutorisation,
    revokerAutorisationMedecin,
    getNotificationsStats,
    marquerToutesNotificationsLues,
    marquerNotificationDroitsAccesLue,
    getDMPAccessHistory,
    getDocumentsDMP,
    getDocumentsPersonnelsDMP,
    uploadDocumentDMP,
    getAutoMesuresDMP,
    createAutoMesureDMP,
    getDMP,
    updateDMP,
    getHistoriqueMedical,
    addHistoriqueEntry,
    getJournalActivite,
    getDroitsAcces,
    updateDroitsAcces,
    getBibliothequeSante,
    getStatistiquesDMP,
    getRendezVousDMP,
    createRendezVousDMP,
    getTableauDeBord,
    getRappels,
    findAutorisationIdFromNotification,
    verifierAutorisationExistence,
    getAutorisationsDemandees,
    verifierAcces,
    verifierAccesMedecinPatient,
    getDureeRestante,
};

export default dmpApiExports;
